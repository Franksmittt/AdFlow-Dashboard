├── app\
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\layout.js
--------------------------------------------------------------------------------
// app/layout.js
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AppProvider } from './context/AppContext';
import { Toaster } from 'react-hot-toast';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "AdFlow Hub",
  description: "Your personal Facebook Ads command center.",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <a href="#main-content" className="sr-only focus:not-sr-only focus:absolute focus:z-50 focus:px-4 focus:py-2 focus:m-2 focus:bg-yellow-400 focus:text-gray-900 focus:rounded-lg">
          Skip to main content
        </a>
        <AppProvider>
          <Toaster
            position="bottom-right"
            toastOptions={{
              style: {
                background: '#333',
                color: '#fff',
              },
            }}
          />
          {children}
        </AppProvider>
      </body>
    </html>
  );
}

│   ├── page.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\page.js
--------------------------------------------------------------------------------
// app/page.js
"use client";
import React, { useState, useEffect, useRef, memo } from 'react';
import Sidebar from './components/Sidebar';
import { useAppContext } from './context/AppContext';
import Link from 'next/link';
import toast from 'react-hot-toast';
import { z } from 'zod';
import ConfirmationModal from './components/ui/ConfirmationModal';
import SkeletonCard from './components/ui/SkeletonCard';
import { Target, CheckSquare, Plus, Upload, Download, DollarSign, Edit } from './components/icons';

const statusConfig = {
    "Planning": { text: "text-blue-400" },
    "In Progress": { text: "text-yellow-400" },
    "Live": { text: "text-green-400" },
    "Completed": { text: "text-gray-500" },
};

const StatCard = memo(({ title, value, icon }) => (
    <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl">
        <div className="flex justify-between items-center">
            <p className="text-sm font-medium text-gray-400">{title}</p>
            {icon}
        </div>
        <p className="text-3xl font-bold mt-2 text-white">{value}</p>
    </div>
));
StatCard.displayName = 'StatCard';

// FIX: Corrected the position of .strict()
const importedDataSchema = z.array(z.object({
  campaignName: z.string().min(1, 'Campaign name is required'),
  objective: z.string().min(1, 'Objective is required'),
  branch: z.string().min(1, 'Branch is required'),
  adFormat: z.string(),
  creativeNotes: z.string(),
  visualsDescription: z.array(z.string()),
  primaryTextOptions: z.array(z.string()),
  headlineOptions: z.array(z.string()),
  cta: z.string(),
  tags: z.array(z.string()).optional(),
}).strict()); // The .strict() call is now on z.object()

export default function DashboardPage() {
    const { campaigns, tasks, notes, budgets, saveData, loading } = useAppContext();
    const [dateTime, setDateTime] = useState('');
    const fileInputRef = useRef(null);
    const [isImportConfirmOpen, setImportConfirmOpen] = useState(false);
    const [fileToImport, setFileToImport] = useState(null);

    useEffect(() => {
        const timer = setInterval(() => {
            const now = new Date();
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            setDateTime(now.toLocaleDateString('en-ZA', options));
        }, 1000);
        return () => clearInterval(timer);
    }, []);

    const handleExportAll = () => {
        const allData = { campaigns, tasks, notes, budgets };
        const jsonString = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(allData, null, 2))}`;
        const link = document.createElement("a");
        link.href = jsonString;
        link.download = `adflow-hub-backup-${new Date().toISOString().slice(0,10)}.json`;
        link.click();
        toast.success("All data exported successfully!");
    };

    const handleImportFileSelect = (event) => {
        const file = event.target.files[0];
        if (!file) return;

        handleExportAll();
        toast.info("Created a backup of your current data just in case.");
        setFileToImport(file);
        setImportConfirmOpen(true);
        event.target.value = null;
    };

    const executeImport = () => {
        if (!fileToImport) return;

        const fileReader = new FileReader();
        fileReader.readAsText(fileToImport, "UTF-8");
        fileReader.onload = async (e) => {
            try {
                const importedData = JSON.parse(e.target.result);
                const result = importedDataSchema.safeParse(importedData);

                if (!result.success) {
                    const errorDetails = result.error.errors.map(err => `${err.path.join('.')} - ${err.message}`).join('; ');
                    toast.error("Invalid file format. Please check the JSON structure. Details in console.");
                    console.error("Import validation errors:", errorDetails);
                    return;
                }

                for (const idea of result.data) {
                    const newCampaign = {
                        name: idea.campaignName,
                        branch: idea.branch,
                        objective: idea.objective,
                        status: 'Planning',
                        startDate: new Date().toISOString().slice(0, 10),
                        endDate: null,
                        primaryText: idea.primaryTextOptions[0],
                        headlines: idea.headlineOptions,
                        visuals: { "1:1": null, "4:5": null, "9:16": null },
                        checklist: {
                            primaryText: false,
                            headlines: false,
                            visuals: false,
                            targeting: false,
                            budget: false,
                        },
                    };
                    await saveData('campaigns', newCampaign);

                    const newNote = {
                        title: `Ad Idea: ${idea.campaignName}`,
                        content: `**Creative Notes:**\n${idea.creativeNotes}\n\n**Visuals Description:**\n- ${idea.visualsDescription.join('\n- ')}\n\n**Primary Text Options:**\n- ${idea.primaryTextOptions.join('\n- ')}\n\n**Headline Options:**\n- ${idea.headlineOptions.join('\n- ')}\n\n**CTA:** ${idea.cta}`,
                        color: 'bg-indigo-900/80',
                        createdAt: new Date().toISOString(),
                        imageUrl: null,
                        sourceUrl: '',
                        tags: idea.tags || [],
                    };
                    await saveData('notes', newNote);
                }

                toast.success("AI ad ideas imported successfully!");

            } catch (error) {
                toast.error("Failed to parse or import file.");
                console.error("Error parsing imported file:", error);
            }
        };
        setImportConfirmOpen(false);
        setFileToImport(null);
    };

    if (loading) {
        return (
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main id="main-content" className="flex-1 p-6 md:p-8 lg:p-10">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4">
                        <div>
                            <div className="h-9 bg-gray-700 rounded w-48 mb-2 animate-pulse"></div>
                            <div className="h-5 bg-gray-700 rounded w-64 animate-pulse"></div>
                        </div>
                        <div className="flex items-center gap-2">
                           <div className="h-11 bg-gray-700 rounded-lg w-32 animate-pulse"></div>
                           <div className="h-11 bg-gray-700 rounded-lg w-32 animate-pulse"></div>
                           <div className="h-11 bg-gray-700 rounded-lg w-40 animate-pulse"></div>
                        </div>
                    </header>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <SkeletonCard />
                        <SkeletonCard />
                        <SkeletonCard />
                        <SkeletonCard />
                    </div>
                </main>
            </div>
        );
    }
    
    const activeCampaignsCount = campaigns.filter(c => c.status === 'Live').length;
    const tasksToDoCount = tasks.filter(t => t.status === 'To Do').length;
    const totalAllocated = budgets.reduce((sum, camp) => sum + (camp.totalBudget || 0), 0);
    const creativesInProgressCount = campaigns.filter(c => c.status === 'In Progress' || c.status === 'Planning').length;
    const recentCampaigns = campaigns.slice(0, 5);
    const upcomingTasks = tasks.filter(t => t.status !== 'Done').slice(0, 5);

    return (
        <div className="font-sans antialiased text-gray-200">
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main id="main-content" className="flex-1 p-6 md:p-8 lg:p-10 overflow-y-auto">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4">
                        <div>
                            <h2 className="text-3xl font-bold text-white">Dashboard</h2>
                            <p className="text-gray-400 mt-1">{dateTime}</p>
                        </div>
                        <div className="flex items-center gap-2">
                            <button onClick={() => fileInputRef.current.click()} className="px-4 py-2.5 text-sm font-medium bg-gray-800 text-gray-300 rounded-lg hover:bg-gray-700 transition-colors flex items-center gap-2" aria-label="Import All Data">
                                <Upload className="w-4 h-4" /> Import All
                            </button>
                            <input type="file" ref={fileInputRef} onChange={handleImportFileSelect} accept=".json" className="hidden" />
                            <button onClick={handleExportAll} className="px-4 py-2.5 text-sm font-medium bg-gray-800 text-gray-300 rounded-lg hover:bg-gray-700 transition-colors flex items-center gap-2" aria-label="Export All Data">
                                <Download className="w-4 h-4" /> Export All
                            </button>
                            <Link href="/campaigns" className="px-5 py-2.5 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg shadow-md hover:bg-yellow-300 transition-colors flex items-center justify-center gap-2 whitespace-nowrap">
                                <Plus className="w-5 h-5" />
                                Create Campaign
                            </Link>
                        </div>
                    </header>

                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <StatCard title="Active Campaigns" value={activeCampaignsCount} icon={<Target className="w-6 h-6 text-blue-400" />} />
                        <StatCard title="Total Budget Allocated" value={`R ${totalAllocated.toLocaleString()}`} icon={<DollarSign className="w-6 h-6 text-green-400" />} />
                        <StatCard title="Creative Pipeline" value={creativesInProgressCount} icon={<Edit className="w-6 h-6 text-purple-400" />} />
                        <StatCard title="Tasks To-Do" value={tasksToDoCount} icon={<CheckSquare className="w-6 h-6 text-yellow-400" />} />
                    </div>

                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        <section className="lg:col-span-2 bg-gray-900/70 border border-gray-800 rounded-xl p-6">
                            <h3 className="text-xl font-semibold text-white mb-4">Recent Campaigns</h3>
                            <div className="space-y-4">
                                {recentCampaigns.length > 0 ? recentCampaigns.map(campaign => (
                                    <Link href={`/campaigns/${campaign.id}`} key={campaign.id} className="bg-gray-800/60 p-4 rounded-lg flex items-center justify-between hover:bg-gray-800 transition-colors cursor-pointer">
                                        <div>
                                            <p className="font-semibold text-white">{campaign.name}</p>
                                            <p className="text-sm text-gray-400">{campaign.objective}</p>
                                        </div>
                                        <div className="flex items-center gap-4">
                                            <span className={`inline-flex items-center gap-1.5 px-2.5 py-0.5 rounded-full text-xs font-medium ${statusConfig[campaign.status]?.text}`}>
                                                <span className={`w-2 h-2 rounded-full bg-current`}></span>
                                                {campaign.status}
                                            </span>
                                        </div>
                                    </Link>
                                )) : <p className="text-gray-500">No campaigns found. Create one to get started!</p>}
                            </div>
                        </section>

                        <section className="bg-gray-900/70 border border-gray-800 rounded-xl p-6">
                            <h3 className="text-xl font-semibold text-white mb-4">Upcoming Tasks</h3>
                            <div className="space-y-4">
                                {upcomingTasks.length > 0 ? upcomingTasks.map(task => (
                                    <div key={task.id} className="bg-gray-800/60 p-4 rounded-lg hover:bg-gray-800 transition-colors">
                                        <p className="font-semibold text-white">{task.text}</p>
                                        <div className="flex items-center justify-between mt-2">
                                            <p className="text-xs text-blue-400 bg-blue-900/50 px-2 py-0.5 rounded-full">{task.campaign}</p>
                                        </div>
                                    </div>
                                )) : <p className="text-gray-500">No upcoming tasks.</p>}
                            </div>
                        </section>
                    </div>
                </main>
            </div>
            <ConfirmationModal
                isOpen={isImportConfirmOpen}
                onClose={() => setImportConfirmOpen(false)}
                onConfirm={executeImport}
                message="Importing data will add new entries from the AI ideas file. A backup of your current data has been automatically created. Are you sure you want to proceed?"
            />
        </div>
    );
}

│   ├── analytics\
│   │   ├── AnalyticsClientView.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\analytics\AnalyticsClientView.js
--------------------------------------------------------------------------------
// app/analytics/AnalyticsClientView.js
"use client";
import React, { useMemo } from 'react';
import Sidebar from '../components/Sidebar';
import { useAppContext } from '../context/AppContext';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from 'recharts';
import { TrendingUp, DollarSign, CheckSquare, Target } from '../components/icons';

// --- Reusable Components ---
const StatCard = ({ title, value, icon, format = "number" }) => {
    const formattedValue = format === 'currency' ? `R ${value.toLocaleString()}` : value.toLocaleString();
    return (
        <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl">
            <div className="flex justify-between items-center">
                <p className="text-sm font-medium text-gray-400">{title}</p>
                {icon}
            </div>
            <p className="text-3xl font-bold mt-2 text-white">{formattedValue}</p>
        </div>
    );
};

const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
        return (
            <div className="p-4 bg-gray-900 border border-gray-700 rounded-lg shadow-lg">
                <p className="label text-white font-bold">{`${label}`}</p>
                {payload.map((pld, index) => (
                    <p key={index} style={{ color: pld.color }} className="text-sm">
                        {`${pld.name}: ${pld.name.toLowerCase().includes('spend') || pld.name.toLowerCase().includes('revenue') ? 'R' : ''}${pld.value.toLocaleString()}`}
                    </p>
                ))}
            </div>
        );
    }
    return null;
};

// --- Main Client View ---
export default function AnalyticsClientView() {
    const { campaigns, loading } = useAppContext();

    const analyticsData = useMemo(() => {
        if (!campaigns) return { totals: {}, chartData: [] };

        const totals = {
            spend: 0,
            revenue: 0,
            clicks: 0,
            conversions: 0,
        };

        const chartData = campaigns.map(c => {
            const p = c.performance || {};
            totals.spend += p.spend || 0;
            totals.revenue += p.revenue || 0;
            totals.clicks += p.clicks || 0;
            totals.conversions += p.conversions || 0;

            const cpc = (p.clicks > 0) ? (p.spend / p.clicks) : 0;
            const roas = (p.spend > 0) ? (p.revenue / p.spend) : 0;

            return {
                name: c.name,
                Spend: p.spend || 0,
                Revenue: p.revenue || 0,
                CPC: parseFloat(cpc.toFixed(2)),
                ROAS: parseFloat(roas.toFixed(2)),
            };
        });

        return { totals, chartData };
    }, [campaigns]);

    if (loading) {
        return <div className="flex h-screen bg-gray-950 text-white items-center justify-center"><p>Loading Analytics...</p></div>;
    }

    return (
        <div className="font-sans antialiased text-gray-200">
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main className="flex-1 p-6 md:p-8 lg:p-10 flex flex-col gap-8 overflow-y-auto">
                    <header>
                        <h2 className="text-3xl font-bold text-white">Performance Analytics</h2>
                        <p className="text-gray-400 mt-1">An overview of your campaign performance and key metrics.</p>
                    </header>

                    {/* Overall Stats */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                        <StatCard title="Total Spend" value={analyticsData.totals.spend} icon={<DollarSign className="w-6 h-6 text-red-400" />} format="currency" />
                        <StatCard title="Total Revenue" value={analyticsData.totals.revenue} icon={<TrendingUp className="w-6 h-6 text-green-400" />} format="currency" />
                        <StatCard title="Total Clicks" value={analyticsData.totals.clicks} icon={<Target className="w-6 h-6 text-blue-400" />} />
                        <StatCard title="Total Conversions" value={analyticsData.totals.conversions} icon={<CheckSquare className="w-6 h-6 text-yellow-400" />} />
                    </div>

                    {/* Charts */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <div className="bg-gray-800/50 border border-gray-800 p-6 rounded-xl h-96">
                            <h3 className="text-xl font-semibold text-white mb-4">Spend vs. Revenue</h3>
                            <ResponsiveContainer width="100%" height="100%">
                                <BarChart data={analyticsData.chartData} margin={{ top: 5, right: 20, left: 10, bottom: 40 }}>
                                    <CartesianGrid strokeDasharray="3 3" stroke="#4a5568" />
                                    <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} stroke="#a0aec0" tick={{ fontSize: 12 }} />
                                    <YAxis stroke="#a0aec0" tick={{ fontSize: 12 }} />
                                    <Tooltip content={<CustomTooltip />} cursor={{ fill: 'rgba(234, 179, 8, 0.1)' }}/>
                                    <Legend wrapperStyle={{ fontSize: '14px' }} />
                                    <Bar dataKey="Spend" fill="#f87171" />
                                    <Bar dataKey="Revenue" fill="#4ade80" />
                                </BarChart>
                            </ResponsiveContainer>
                        </div>
                        <div className="bg-gray-800/50 border border-gray-800 p-6 rounded-xl h-96">
                            <h3 className="text-xl font-semibold text-white mb-4">Cost Per Click (CPC) & ROAS</h3>
                             <ResponsiveContainer width="100%" height="100%">
                                <LineChart data={analyticsData.chartData} margin={{ top: 5, right: 20, left: 10, bottom: 40 }}>
                                    <CartesianGrid strokeDasharray="3 3" stroke="#4a5568" />
                                    <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} stroke="#a0aec0" tick={{ fontSize: 12 }} />
                                    <YAxis yAxisId="left" stroke="#a0aec0" tick={{ fontSize: 12 }} />
                                    <YAxis yAxisId="right" orientation="right" stroke="#a0aec0" tick={{ fontSize: 12 }} />
                                    <Tooltip content={<CustomTooltip />} cursor={{ stroke: 'rgba(234, 179, 8, 0.2)' }}/>
                                    <Legend wrapperStyle={{ fontSize: '14px' }} />
                                    <Line yAxisId="left" type="monotone" dataKey="CPC" stroke="#60a5fa" strokeWidth={2} />
                                    <Line yAxisId="right" type="monotone" dataKey="ROAS" stroke="#facc15" strokeWidth={2} />
                                </LineChart>
                            </ResponsiveContainer>
                        </div>
                    </div>
                </main>
            </div>
        </div>
    );
}


│   │   ├── page.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\analytics\page.js
--------------------------------------------------------------------------------
// app/analytics/page.js
"use client";

import React, { useState } from "react";
import Papa from "papaparse";
import { db } from "../lib/firebase";
import { collection, addDoc, Timestamp } from "firebase/firestore";

export default function AnalyticsUploadPage() {
  const [rows, setRows]               = useState([]);
  const [error, setError]             = useState("");
  const [uploading, setUploading]     = useState(false);
  const [successCount, setSuccessCount] = useState(0);

  // Parse the CSV file on selection
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    setError("");
    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      transformHeader: header => header.toLowerCase().replace(/\s/g, '_'),
      complete: (results) => {
        setRows(results.data);
      },
      error: (err) => {
        setError(err.message);
      },
    });
  };

  // Upload each row to Firestore
  const handleUpload = async () => {
    setUploading(true);
    let count = 0;

    for (const row of rows) {
      try {
        // Adjust these keys to match your normalized CSV headers
        const doc = {
          campaignId:  row.campaign_id   || "",
          date:        Timestamp.fromDate(new Date(row.date)),
          impressions: Number(row.impressions   || 0),
          clicks:      Number(row.clicks        || 0),
          spend:       Number(row.spend        || 0),
          fetchedAt:   Timestamp.now(),
        };
        await addDoc(collection(db, "analytics"), doc);
        count++;
      } catch (e) {
        console.error("Error saving row", e);
      }
    }

    setSuccessCount(count);
    setUploading(false);
  };

  return (
    <div className="max-w-3xl mx-auto p-8">
      <h1 className="text-2xl font-bold mb-4">Upload Campaign Analytics CSV</h1>

      <input
        type="file"
        accept=".csv"
        onChange={handleFileChange}
        className="mb-4"
      />

      {error && (
        <p className="text-red-500 mb-4">Error parsing CSV: {error}</p>
      )}

      {rows.length > 0 && (
        <>
          <h2 className="text-xl font-semibold mb-2">
            Preview ({rows.length} rows)
          </h2>

          <div className="overflow-x-auto mb-4 border rounded">
            <table className="min-w-full bg-white">
              <thead className="bg-gray-200">
                <tr>
                  {Object.keys(rows[0]).map((key) => (
                    <th
                      key={key}
                      className="px-4 py-2 text-left text-sm font-medium text-gray-700"
                    >
                      {key}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-white">
                {rows.slice(0, 5).map((row, i) => (
                  <tr key={i} className={i % 2 ? "bg-gray-50" : ""}>
                    {Object.values(row).map((val, j) => (
                      <td
                        key={j}
                        className="px-4 py-2 text-sm text-gray-800"
                      >
                        {val}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <button
            onClick={handleUpload}
            disabled={uploading}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 transition-colors"
          >
            {uploading ? "Uploading…" : "Save All to Firestore"}
          </button>

          {successCount > 0 && (
            <p className="mt-4 text-green-600">
              Successfully saved {successCount}{" "}
              {successCount === 1 ? "row" : "rows"}!
            </p>
          )}
        </>
      )}
    </div>
  );
}

│   ├── budgets\
│   │   ├── BudgetClientView.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\budgets\BudgetClientView.js
--------------------------------------------------------------------------------
// app/budgets/BudgetClientView.js
"use client";
import React, { useState, useEffect, useRef } from 'react';
import { useAppContext } from '../context/AppContext';
import Sidebar from '../components/Sidebar';
import { z } from 'zod';
import toast from 'react-hot-toast';

// --- ICONS --- //
import Plus from '../components/icons/Plus';
import DollarSign from '../components/icons/DollarSign';
import Edit from '../components/icons/Edit';
import Trash2 from '../components/icons/Trash2';
import Store from '../components/icons/Store';

// --- Custom Confirmation Modal ---
const ConfirmationModal = ({ isOpen, onClose, onConfirm, message }) => {
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
      <div className="bg-gray-900 border border-gray-800 p-6 rounded-xl shadow-2xl m-4">
        <p className="text-white mb-6 text-lg">{message}</p>
        <div className="flex justify-end gap-3">
          <button onClick={onClose} className="px-5 py-2 text-sm font-medium bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">Cancel</button>
          <button onClick={onConfirm} className="px-5 py-2 text-sm font-semibold text-gray-950 bg-red-500 rounded-lg hover:bg-red-400 transition-colors">Confirm</button>
        </div>
      </div>
    </div>
  );
};

// --- CONFIG & SCHEMA --- //
const BRANCHES = ["Alberton", "Vanderbijlpark", "Sasolburg", "National"];
const budgetSchema = z.object({
  id: z.string().optional(),
  name: z.string().min(1, { message: "Campaign Name is required." }).max(100),
  branch: z.string(),
  totalBudget: z.number().min(0, { message: "Total Budget must be a positive number." }),
  dailyBudget: z.number().min(0, { message: "Daily Budget must be a positive number." }),
  spent: z.number().min(0, { message: "Spent amount must be a positive number." }),
  status: z.string(),
  startDate: z.string(),
});

// --- REUSABLE COMPONENTS --- //
const StatCard = ({ title, value, icon, color }) => (
    <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl">
        <div className="flex justify-between items-center">
            <p className="text-sm font-medium text-gray-400">{title}</p>
            <div className={`p-2 rounded-lg ${color}`}>{icon}</div>
        </div>
        <p className="text-3xl font-bold mt-2 text-white">{value}</p>
    </div>
);

const BudgetEditorModal = ({ isOpen, onClose, onSave, budgetToEdit, isSaving }) => {
    const [name, setName] = useState('');
    const [branch, setBranch] = useState(BRANCHES[0]);
    const [totalBudget, setTotalBudget] = useState('');
    const [dailyBudget, setDailyBudget] = useState('');
    const [spent, setSpent] = useState('');
    const modalRef = useRef(null);

    useEffect(() => {
        if (isOpen) {
            if (budgetToEdit) {
                setName(budgetToEdit.name || '');
                setBranch(budgetToEdit.branch || BRANCHES[0]);
                setTotalBudget(budgetToEdit.totalBudget || '');
                setDailyBudget(budgetToEdit.dailyBudget || '');
                setSpent(budgetToEdit.spent || 0);
            } else {
                setName(''); setBranch(BRANCHES[0]); setTotalBudget(''); setDailyBudget(''); setSpent(0);
            }
            if (modalRef.current) {
              modalRef.current.focus();
            }
        }
    }, [budgetToEdit, isOpen]);

    if (!isOpen) return null;

    const handleSubmit = (e) => {
        e.preventDefault();
        const budgetData = {
            ...budgetToEdit,
            id: budgetToEdit?.id, name, branch,
            totalBudget: parseFloat(totalBudget) || 0,
            dailyBudget: parseFloat(dailyBudget) || 0,
            spent: parseFloat(spent) || 0,
            status: budgetToEdit?.status || 'Planning',
            startDate: budgetToEdit?.startDate || new Date().toISOString().slice(0,10)
        };
        const result = budgetSchema.safeParse(budgetData);
        if (!result.success) {
            const errorMessages = result.error.errors.map(err => err.message).join('\n');
            toast.error(`Validation failed:\n${errorMessages}`);
            return;
        }
        onSave(result.data);
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div ref={modalRef} tabIndex="-1" className="bg-gray-900 border border-gray-800 w-full max-w-lg rounded-xl shadow-2xl m-4" onClick={e => e.stopPropagation()}>
                <form onSubmit={handleSubmit}>
                    <div className="flex items-center justify-between p-6 border-b border-gray-800">
                       <h3 className="text-xl font-semibold text-white">{budgetToEdit ? 'Edit Budget' : 'Add Campaign Budget'}</h3>
                      <button type="button" onClick={onClose} className="text-gray-400 hover:text-white text-3xl leading-none" aria-label="Close modal">&times;</button>
                    </div>
                    <div className="p-6 space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                            <div><label htmlFor="name" className="block text-sm font-medium text-gray-300 mb-1">Campaign Name</label><input type="text" id="name" value={name} onChange={e => setName(e.target.value)} required className="w-full bg-gray-800 border-gray-700 rounded-lg p-2 text-white" /></div>
                            <div><label htmlFor="branch" className="block text-sm font-medium text-gray-300 mb-1">Branch</label><select id="branch" value={branch} onChange={e => setBranch(e.target.value)} className="w-full bg-gray-800 border-gray-700 rounded-lg p-2 text-white">{BRANCHES.map(b => <option key={b}>{b}</option>)}</select></div>
                        </div>
                        <div className="grid grid-cols-3 gap-4">
                            <div><label htmlFor="totalBudget" className="block text-sm font-medium text-gray-300 mb-1">Total (R)</label><input type="number" id="totalBudget" value={totalBudget} onChange={e => setTotalBudget(e.target.value)} required className="w-full bg-gray-800 border-gray-700 rounded-lg p-2 text-white" /></div>
                            <div><label htmlFor="dailyBudget" className="block text-sm font-medium text-gray-300 mb-1">Daily (R)</label><input type="number" id="dailyBudget" value={dailyBudget} onChange={e => setDailyBudget(e.target.value)} required className="w-full bg-gray-800 border-gray-700 rounded-lg p-2 text-white" /></div>
                            <div><label htmlFor="spent" className="block text-sm font-medium text-gray-300 mb-1">Spent (R)</label><input type="number" id="spent" value={spent} onChange={e => setSpent(e.target.value)} required className="w-full bg-gray-800 border-gray-700 rounded-lg p-2 text-white" /></div>
                        </div>
                    </div>
                    <div className="flex items-center justify-end p-6 border-t border-gray-800 space-x-2">
                        <button type="button" onClick={onClose} className="px-4 py-2 text-sm font-medium bg-gray-700 rounded-lg">Cancel</button>
                        <button type="submit" disabled={isSaving} className="px-4 py-2 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg disabled:bg-gray-500 disabled:cursor-not-allowed">
                            {isSaving ? 'Saving...' : 'Save Budget'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default function BudgetClientView({ initialBudgets }) {
    // FIX: Removed local state and redundant listener. Now consumes global state from context.
    const { budgets, saveData, deleteData, loading } = useAppContext();
    const [isModalOpen, setModalOpen] = useState(false);
    const [budgetToEdit, setBudgetToEdit] = useState(null);
    const [isSaving, setIsSaving] = useState(false);
    const [isConfirmOpen, setConfirmOpen] = useState(false);
    const [budgetToDelete, setBudgetToDelete] = useState(null);

    const handleSaveBudget = async (savedBudget) => {
        setIsSaving(true);
        try {
            await toast.promise(
                saveData('budgets', savedBudget),
                {
                    loading: 'Saving budget...',
                    success: 'Budget saved successfully!',
                    error: 'Failed to save budget.',
                }
            );
            setModalOpen(false);
        } catch (error) {
            // Toast will handle the error message
        } finally {
            setIsSaving(false);
        }
    };

    const handleAddClick = () => { setBudgetToEdit(null); setModalOpen(true); };
    const handleEditClick = (budget) => { setBudgetToEdit(budget); setModalOpen(true); };

    const handleDeleteClick = (id) => {
        setBudgetToDelete(id);
        setConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!budgetToDelete) return;
        try {
            await deleteData('budgets', budgetToDelete);
            toast.success('Budget deleted.');
        } catch (error) {
            toast.error('Failed to delete budget.');
        } finally {
            setConfirmOpen(false);
            setBudgetToDelete(null);
        }
    };
    
    if (loading) {
        return (
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main className="flex-1 flex items-center justify-center text-white">
                    <p>Loading Budgets...</p>
                </main>
            </div>
        );
    }

    const totalAllocated = budgets.reduce((sum, camp) => sum + (camp.totalBudget || 0), 0);
    const totalSpent = budgets.reduce((sum, camp) => sum + (camp.spent || 0), 0);
    const totalRemaining = totalAllocated - totalSpent;
    const activeDailySpend = budgets.filter(b => b.status === 'Live').reduce((sum, camp) => sum + (camp.dailyBudget || 0), 0);
    const spendByBranch = budgets.reduce((acc, budget) => {
        const branch = budget.branch || 'Unassigned';
        if (!acc[branch]) acc[branch] = 0;
        acc[branch] += budget.spent || 0;
        return acc;
    }, {});

    return (
        <div className="font-sans antialiased text-gray-200">
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main className="flex-1 p-6 md:p-8 lg:p-10 flex flex-col">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4 flex-shrink-0">
                         <div>
                            <h2 className="text-3xl font-bold text-white">Budgets Dashboard</h2>
                            <p className="text-gray-400 mt-1">Your financial command center for all ad spend.</p>
                         </div>
                        <div className="flex items-center gap-2">
                            <button onClick={handleAddClick} className="px-5 py-2.5 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg shadow-md hover:bg-yellow-300 transition-colors flex items-center gap-2 whitespace-nowrap" aria-label="Add New Budget"><Plus className="w-5 h-5" />Add Budget</button>
                        </div>
                    </header>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <StatCard
                            title="Total Allocated" value={`R ${totalAllocated.toLocaleString()}`} icon={<DollarSign className="w-6 h-6" />} color="bg-blue-900/50 text-blue-300" />
                        <StatCard title="Total Spent" value={`R ${totalSpent.toLocaleString()}`} icon={<DollarSign className="w-6 h-6" />} color="bg-yellow-900/50 text-yellow-300" />
                        <StatCard title="Total Remaining" value={`R ${totalRemaining.toLocaleString()}`} icon={<DollarSign className="w-6 h-6" />} color="bg-green-900/50 text-green-300" />
                        <StatCard title="Active Daily Spend" value={`R ${activeDailySpend.toLocaleString()}`} icon={<DollarSign className="w-6 h-6" />} color="bg-purple-900/50 text-purple-300" />
                    </div>
                    <div className="mb-8">
                        <h3 className="text-xl font-semibold text-white mb-4">Spend by Branch</h3>
                         <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                            {Object.entries(spendByBranch).map(([branch, spend]) => (
                                <div key={branch} className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl">
                                    <p className="text-sm font-medium text-gray-400 flex items-center gap-2"><Store className="w-4 h-4"/>{branch}</p>
                                    <p className="text-3xl font-bold mt-2 text-white">R {spend.toLocaleString()}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                     <div className="bg-gray-900/70 border border-gray-800 rounded-xl flex-1 overflow-auto">
                        <table className="w-full text-left">
                            <thead className="sticky top-0 bg-gray-900/70 backdrop-blur-sm">
                                <tr className="border-b border-gray-800">
                                    <th className="p-4 text-sm font-semibold text-gray-400">Campaign</th>
                                    <th className="p-4 text-sm font-semibold text-gray-400">Branch</th>
                                    <th className="p-4 text-sm font-semibold text-gray-400">Total Budget</th>
                                    <th className="p-4 text-sm font-semibold text-gray-400">Spent</th>
                                    <th className="p-4 text-sm font-semibold text-gray-400">Progress</th>
                                    <th className="p-4 text-sm font-semibold text-gray-400">Actions</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-800">
                                {budgets.map(budget => {
                                    const progress = budget.totalBudget > 0 ? ((budget.spent || 0) / budget.totalBudget) * 100 : 0;
                                    return (
                                        <tr key={budget.id} className="hover:bg-gray-800/60 transition-colors">
                                            <td className="p-4 font-medium text-white">{budget.name}</td>
                                            <td className="p-4 text-gray-300">{budget.branch}</td>
                                            <td className="p-4 text-gray-300">R {budget.totalBudget?.toLocaleString() || 0}</td>
                                            <td className="p-4 text-yellow-300">R {budget.spent?.toLocaleString() || 0}</td>
                                            <td className="p-4">
                                                <div className="w-full bg-gray-700 rounded-full h-2.5">
                                                    <div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: `${Math.min(progress, 100)}%` }}></div>
                                                </div>
                                            </td>
                                            <td className="p-4">
                                                <div className="flex gap-4">
                                                    <button onClick={() => handleEditClick(budget)} className="text-gray-400 hover:text-white" aria-label={`Edit ${budget.name}`}><Edit className="w-4 h-4" /></button>
                                                    <button onClick={() => handleDeleteClick(budget.id)} className="text-gray-400 hover:text-red-400" aria-label={`Delete ${budget.name}`}><Trash2 className="w-4 h-4" /></button>
                                                </div>
                                            </td>
                                      </tr>
                                    );
                                })}
                            </tbody>
                        </table>
                    </div>
                </main>
                <BudgetEditorModal isOpen={isModalOpen} onClose={() => setModalOpen(false)} onSave={handleSaveBudget} budgetToEdit={budgetToEdit} isSaving={isSaving} />
                <ConfirmationModal
                    isOpen={isConfirmOpen}
                    onClose={() => setConfirmOpen(false)}
                    onConfirm={confirmDelete}
                    message="Are you sure you want to delete this budget entry?" />
            </div>
        </div>
    );
}

│   │   ├── page.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\budgets\page.js
--------------------------------------------------------------------------------
// app/budgets/page.js
"use client"; // This page now only renders a client component.

import BudgetClientView from './BudgetClientView';

// This is now a simple component that renders the client view.
// No data fetching is needed here anymore.
export default function BudgetsPage() {
    // The BudgetClientView will get all its data from the AppContext.
    // We pass empty arrays for initial props as they are no longer used.
    return <BudgetClientView initialBudgets={[]} />;
}


│   ├── campaigns\
│   │   ├── CampaignClientView.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\campaigns\CampaignClientView.js
--------------------------------------------------------------------------------
// app/campaigns/CampaignClientView.js
"use client";
import React, { useState, useEffect, useRef } from "react";
import Link from 'next/link';
import Image from 'next/image';
import Sidebar from "../components/Sidebar";
import { useAppContext } from "../context/AppContext";
import toast from 'react-hot-toast';
import { z } from 'zod';
import { useAccessibleKanban } from '../hooks/useAccessibleKanban';
import ConfirmationModal from '../components/ui/ConfirmationModal';
import { Plus, List, Trello } from '../components/icons';

const AD_FORMATS = ["1:1", "4:5", "9:16"];
const BRANCHES = ["Alberton", "Vanderbijlpark", "Sasolburg", "National"];
const KANBAN_COLUMNS = ["Planning", "In Progress", "Live", "Completed"];
const statusConfig = {
    Planning: { color: "blue", bg: "bg-blue-900/50", text: "text-blue-400" },
    "In Progress": { color: "yellow", bg: "bg-yellow-900/50", text: "text-yellow-400" },
    Live: { color: "green", bg: "bg-green-900/50", text: "text-green-400" },
    Completed: { color: "gray", bg: "bg-gray-800", text: "text-gray-400" },
};
const OBJECTIVES = ["Sales", "Leads", "Brand Awareness", "Engagement"];
const campaignSchema = z.object({
  id: z.string().optional(),
  name: z.string().min(1, { message: "Campaign name is required." }),
  branch: z.enum(BRANCHES),
  objective: z.enum(OBJECTIVES),
  startDate: z.string().min(1, { message: "Start date is required." }),
  endDate: z.string().min(1, { message: "End date is required." }),
  primaryText: z.string().optional(),
  headlines: z.array(z.string()),
  visuals: z.object({
    "1:1": z.string().nullable(),
    "4:5": z.string().nullable(),
    "9:16": z.string().nullable(),
  }),
  targetValue: z.number().min(0).optional(),
  budgetId: z.string().optional(),
  status: z.enum(KANBAN_COLUMNS),
  checklist: z.object({
    primaryText: z.boolean(),
    headlines: z.boolean(),
    visuals: z.boolean(),
    targeting: z.boolean(),
    budget: z.boolean(),
  }),
  performance: z.any().optional(), // Allow performance data
});

// --- SUB-COMPONENTS --- //
const CampaignEditorModal = ({ isOpen, onClose, onSave, campaignToEdit, budgets, uploadFile }) => {
    const [name, setName] = useState("");
    const [branch, setBranch] = useState(BRANCHES[0]);
    const [objective, setObjective] = useState(OBJECTIVES[0]);
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");
    const [visuals, setVisuals] = useState({ "1:1": null, "4:5": null, "9:16": null });
    const [isUploading, setIsUploading] = useState(null);
    const modalRef = useRef(null);

    useEffect(() => {
        if (isOpen) {
            if (campaignToEdit) {
                setName(campaignToEdit.name || "");
                setBranch(campaignToEdit.branch || BRANCHES[0]);
                setObjective(campaignToEdit.objective || OBJECTIVES[0]);
                setStartDate(campaignToEdit.startDate || "");
                setEndDate(campaignToEdit.endDate || "");
                setVisuals(campaignToEdit.visuals || { "1:1": null, "4:5": null, "9:16": null });
            } else {
                setName(""); setBranch(BRANCHES[0]); setObjective(OBJECTIVES[0]); setStartDate(""); setEndDate("");
                setVisuals({ "1:1": null, "4:5": null, "9:16": null });
            }
            if (modalRef.current) modalRef.current.focus();
        }
    }, [campaignToEdit, isOpen]);

    if (!isOpen) return null;

    const handleSubmit = (e) => {
        e.preventDefault();
        const checklist = {
            primaryText: campaignToEdit?.primaryText ? !!campaignToEdit.primaryText : false,
            headlines: campaignToEdit?.headlines ? campaignToEdit.headlines.some(h => h.trim() !== '') : false,
            visuals: Object.values(visuals).some(v => v),
            targeting: campaignToEdit?.targetValue ? !!campaignToEdit.targetValue : false,
            budget: campaignToEdit?.budgetId ? !!campaignToEdit.budgetId : false,
        };
        const savedCampaign = {
            ...campaignToEdit, name, branch, objective, startDate, endDate, visuals,
            status: campaignToEdit?.status || "Planning",
            checklist,
        };

        const result = campaignSchema.safeParse(savedCampaign);
        if (!result.success) {
            const errorMessages = result.error.errors.map(err => err.message).join('\n');
            toast.error(`Validation failed:\n${errorMessages}`);
            return;
        }
        onSave(result.data);
        onClose();
    };

    const handleVisualUpload = async (format, e) => {
        const file = e.target.files[0];
        if (!file) return;

        setIsUploading(format);
        const toastId = toast.loading(`Uploading ${format} visual...`);
        try {
            const downloadURL = await uploadFile(file, 'campaign-visuals');
            setVisuals((prev) => ({ ...prev, [format]: downloadURL }));
            toast.success(`Visual for ${format} uploaded!`, { id: toastId });
        } catch (error) {
            toast.error("Upload failed. Please try again.", { id: toastId });
        } finally {
            setIsUploading(null);
        }
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div ref={modalRef} tabIndex="-1" className="bg-gray-900 border border-gray-800 w-full max-w-lg rounded-xl shadow-2xl m-4" onClick={e => e.stopPropagation()}>
                <form onSubmit={handleSubmit}>
                    <div className="flex items-center justify-between p-6 border-b border-gray-800">
                        <h3 className="text-xl font-semibold text-white">{campaignToEdit ? "Edit Campaign" : "Create New Campaign"}</h3>
                        <button type="button" onClick={onClose} className="text-gray-400 hover:text-white text-3xl leading-none" aria-label="Close modal">&times;</button>
                    </div>
                    <div className="p-6 space-y-4 max-h-[70vh] overflow-y-auto">
                        <div><label htmlFor="name" className="block text-sm font-medium text-gray-300 mb-1">Campaign Name</label><input type="text" id="name" value={name} onChange={(e) => setName(e.target.value)} required className="w-full bg-gray-800 border border-gray-700 rounded-lg p-2 text-white" /></div>
                        <div className="grid grid-cols-2 gap-4">
                            <div><label htmlFor="branch" className="block text-sm font-medium text-gray-300 mb-1">Branch</label><select id="branch" value={branch} onChange={(e) => setBranch(e.target.value)} className="w-full bg-gray-800 border border-gray-700 rounded-lg p-2 text-white">{BRANCHES.map((b) => (<option key={b} value={b}>{b}</option>))}</select></div>
                            <div><label htmlFor="objective" className="block text-sm font-medium text-gray-300 mb-1">Objective</label><select id="objective" value={objective} onChange={(e) => setObjective(e.target.value)} className="w-full bg-gray-800 border border-gray-700 rounded-lg p-2 text-white">{OBJECTIVES.map((o) => (<option key={o} value={o}>{o}</option>))}</select></div>
                        </div>
                        <div className="grid grid-cols-2 gap-4"><div><label htmlFor="startDate" className="block text-sm font-medium text-gray-300 mb-1">Start Date</label><input type="date" id="startDate" value={startDate} onChange={(e) => setStartDate(e.target.value)} required className="w-full bg-gray-800 border border-gray-700 rounded-lg p-2 text-white" /></div><div><label htmlFor="endDate" className="block text-sm font-medium text-gray-300 mb-1">End Date</label><input type="date" id="endDate" value={endDate} onChange={(e) => setEndDate(e.target.value)} required className="w-full bg-gray-800 border border-gray-700 rounded-lg p-2 text-white" /></div></div>
                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">Visuals</label>
                            {AD_FORMATS.map((format) => (
                                <div key={format} className="mb-4">
                                    <label className="block text-sm text-gray-400 mb-1">{format} Visual</label>
                                    <input type="file" accept="image/*,video/*" onChange={(e) => handleVisualUpload(format, e)} disabled={!!isUploading} className="w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-yellow-400 file:text-gray-950 hover:file:bg-yellow-300 disabled:file:bg-gray-500" />
                                    {isUploading === format && <p className="text-xs text-yellow-400 mt-1">Uploading...</p>}
                                    {visuals[format] && <div className="relative w-32 h-32 mt-2"><Image src={visuals[format]} alt={`${format} visual`} fill className="object-cover rounded-md" /></div>}
                                </div>
                            ))}
                        </div>
                    </div>
                    <div className="flex items-center justify-end p-6 border-t border-gray-800 space-x-2">
                        <button type="button" onClick={onClose} className="px-4 py-2 text-sm font-medium bg-gray-700 text-white rounded-lg hover:bg-gray-600">Cancel</button>
                        <button type="submit" className="px-4 py-2 text-sm font-medium bg-yellow-400 text-gray-950 rounded-lg hover:bg-yellow-300">Save Campaign</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const CampaignListView = ({ campaigns, onEdit, onDelete }) => (
    <div className="bg-gray-900/70 border border-gray-800 rounded-xl flex-1 overflow-auto">
        <table className="w-full text-left">
            <thead className="sticky top-0 bg-gray-900/70 backdrop-blur-sm">
                <tr className="border-b border-gray-800"><th className="p-4 text-sm font-semibold text-gray-400">Name</th><th className="p-4 text-sm font-semibold text-gray-400">Branch</th><th className="p-4 text-sm font-semibold text-gray-400">Objective</th><th className="p-4 text-sm font-semibold text-gray-400">Status</th><th className="p-4 text-sm font-semibold text-gray-400">Progress</th><th className="p-4 text-sm font-semibold text-gray-400">Actions</th></tr>
            </thead>
            <tbody className="divide-y divide-gray-800">
                {campaigns.map((campaign) => {
                    const progress = campaign.checklist ? (Object.values(campaign.checklist).filter(Boolean).length / Object.keys(campaign.checklist).length) * 100 : 0;
                    return (
                        <tr key={campaign.id} className="hover:bg-gray-800/60 transition-colors">
                            <td className="p-4 font-medium text-white"><Link href={`/campaigns/${campaign.id}`} className="hover:text-yellow-400 transition-colors">{campaign.name}</Link></td>
                            <td className="p-4 text-sm text-gray-400">{campaign.branch}</td>
                            <td className="p-4 text-sm text-gray-400">{campaign.objective}</td>
                            <td className="p-4"><span className={`inline-flex items-center gap-1.5 px-2.5 py-0.5 rounded-full text-xs font-medium ${statusConfig[campaign.status]?.text} ${statusConfig[campaign.status]?.bg}`}>{campaign.status}</span></td>
                            <td className="p-4"><div className="w-24 bg-gray-700 rounded-full h-2.5"><div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: `${progress}%` }}></div></div></td>
                            <td className="p-4">
                                <div className="flex gap-4">
                                    <button onClick={() => onEdit(campaign)} className="text-gray-400 hover:text-yellow-300 transition-colors" aria-label={`Edit ${campaign.name}`}>Edit</button>
                                    <button onClick={() => onDelete(campaign.id)} className="text-gray-400 hover:text-red-400 transition-colors" aria-label={`Delete ${campaign.name}`}>Delete</button>
                                </div>
                            </td>
                        </tr>
                    );
                })}
            </tbody>
        </table>
    </div>
);

const CampaignKanbanView = ({ campaigns, onDragStart, onDrop, onKeyDown, draggedItem, keyboardSelectedItem }) => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 flex-1 overflow-y-auto">
        {KANBAN_COLUMNS.map((status) => (
            <div key={status} onDragOver={(e) => e.preventDefault()} onDrop={(e) => onDrop(e, status)} className={`p-4 border-2 border-dashed rounded-xl flex flex-col transition-colors ${draggedItem && draggedItem.status !== status ? "border-yellow-400/50" : "border-transparent"} bg-gray-900/70`}>
                <h3 className="text-lg font-semibold text-white mb-4">{status}</h3>
                <div className="space-y-4 overflow-y-auto flex-1">
                    {campaigns.filter((c) => c.status === status).map((campaign) => {
                        const progress = campaign.checklist ? (Object.values(campaign.checklist).filter(Boolean).length / Object.keys(campaign.checklist).length) * 100 : 0;
                        return (
                             <div 
                                key={campaign.id} 
                                draggable 
                                onDragStart={(e) => onDragStart(e, campaign)}
                                onKeyDown={(e) => onKeyDown(e, campaign)}
                                tabIndex={0}
                                className={`bg-gray-800 p-4 rounded-lg border border-gray-700 cursor-grab active:cursor-grabbing transition-all ${draggedItem?.id === campaign.id ? 'opacity-50' : 'opacity-100'} ${keyboardSelectedItem?.id === campaign.id ? 'ring-2 ring-yellow-400' : 'focus:ring-2 focus:ring-blue-400'}`}
                                role="button"
                                aria-roledescription="Draggable campaign"
                                aria-grabbed={keyboardSelectedItem?.id === campaign.id}
                            >
                                <div className="flex justify-between items-start mb-2"><p className="font-semibold text-white pr-4">{campaign.name}</p><span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${statusConfig[campaign.status]?.bg} ${statusConfig[campaign.status]?.text}`}>{campaign.branch}</span></div>
                                <p className="text-sm text-gray-400">{campaign.objective}</p>
                                <div className="w-full bg-gray-700 rounded-full h-2.5 mt-2"><div className="bg-yellow-400 h-2.5 rounded-full" style={{ width: `${progress}%` }}></div></div>
                            </div>
                        );
                    })}
                </div>
            </div>
        ))}
    </div>
);
// --- MAIN CLIENT COMPONENT --- //
export default function CampaignClientView() {
    const { campaigns, budgets, saveData, deleteData, loading, uploadFile } = useAppContext();
    const [isModalOpen, setModalOpen] = useState(false);
    const [campaignToEdit, setCampaignToEdit] = useState(null);
    const [view, setView] = useState("list");
    const [isConfirmOpen, setConfirmOpen] = useState(false);
    const [campaignToDelete, setCampaignToDelete] = useState(null);
    
    const { 
        draggedItem, keyboardSelectedItem, handleDragStart, handleDrop, handleKeyDown 
    } = useAccessibleKanban({ saveData, collectionName: 'campaigns', columns: KANBAN_COLUMNS });

    const handleSaveCampaign = async (savedCampaign) => {
        try {
            await toast.promise(
                saveData('campaigns', savedCampaign),
                {
                    loading: 'Saving campaign...',
                    success: 'Campaign saved successfully!',
                    error: 'Failed to save campaign.',
                }
            );
            setModalOpen(false);
        } catch (error) {
            console.error("Error saving campaign:", error);
        }
    };

    const handleAddClick = () => { setCampaignToEdit(null); setModalOpen(true); };
    const handleEditClick = (campaign) => { setCampaignToEdit(campaign); setModalOpen(true); };

    const handleDeleteClick = (id) => {
        setCampaignToDelete(id);
        setConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!campaignToDelete) return;
        try {
            await deleteData('campaigns', campaignToDelete);
            toast.success('Campaign deleted successfully!');
        } catch (error) {
            toast.error('Failed to delete campaign.');
        } finally {
            setConfirmOpen(false);
            setCampaignToDelete(null);
        }
    };

    if (loading) {
        return (
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main className="flex-1 flex items-center justify-center text-white"><p>Loading Campaigns...</p></main>
            </div>
        );
    }

    return (
        <div className="font-sans antialiased text-gray-200">
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main className="flex-1 p-6 md:p-8 lg:p-10 flex flex-col">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4 flex-shrink-0">
                        <div>
                            <h2 className="text-3xl font-bold text-white">Campaigns</h2>
                            <p className="text-gray-400 mt-1">Manage your Facebook ad campaigns across all stores.</p>
                        </div>
                        <div className="flex items-center gap-2">
                            <button onClick={handleAddClick} className="px-5 py-2.5 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg hover:bg-yellow-300 transition-colors flex items-center gap-2" aria-label="Create New Campaign">
                                <Plus className="w-5 h-5" /> Create Campaign
                            </button>
                        </div>
                    </header>
                    <div className="flex items-center bg-gray-800 rounded-lg p-1 mb-8 w-min flex-shrink-0">
                        <button onClick={() => setView("list")} className={`px-3 py-1.5 text-sm font-medium rounded-md flex items-center gap-2 transition-colors ${view === "list" ? "bg-gray-700 text-white" : "text-gray-400 hover:text-white"}`} aria-label="View as List">
                            <List className="w-4 h-4" /> List
                        </button>
                        <button onClick={() => setView("kanban")} className={`px-3 py-1.5 text-sm font-medium rounded-md flex items-center gap-2 transition-colors ${view === "kanban" ? "bg-gray-700 text-white" : "text-gray-400 hover:text-white"}`} aria-label="View as Kanban Board">
                            <Trello className="w-4 h-4" /> Kanban
                        </button>
                    </div>
                    {view === "list" ? (
                        <CampaignListView campaigns={campaigns} onEdit={handleEditClick} onDelete={handleDeleteClick} />
                    ) : (
                        <CampaignKanbanView 
                            campaigns={campaigns} 
                            onDragStart={handleDragStart} 
                            onDrop={handleDrop}
                            onKeyDown={handleKeyDown}
                            draggedItem={draggedItem}
                            keyboardSelectedItem={keyboardSelectedItem}
                        />
                    )}
                    <CampaignEditorModal isOpen={isModalOpen} onClose={() => setModalOpen(false)} onSave={handleSaveCampaign} campaignToEdit={campaignToEdit} budgets={budgets} uploadFile={uploadFile} />
                    <ConfirmationModal
                        isOpen={isConfirmOpen}
                        onClose={() => setConfirmOpen(false)}
                        onConfirm={confirmDelete}
                        message="Are you sure you want to delete this campaign?" />
                </main>
            </div>
        </div>
    );
}


│   │   ├── page.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\campaigns\page.js
--------------------------------------------------------------------------------
// app/campaigns/page.js
"use client"; // This page now only renders a client component.

import CampaignClientView from './CampaignClientView';

// This is now a simple component that renders the client view.
// No data fetching is needed here anymore.
export default function CampaignsPage() {
    // The CampaignClientView will get all its data from the AppContext.
    // We pass empty arrays for initial props as they are no longer used.
    return <CampaignClientView initialCampaigns={[]} initialBudgets={[]} />;
}


│   │   ├── [id]\
│   │   │   ├── page.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\campaigns\[id]\page.js
--------------------------------------------------------------------------------
// app/campaigns/[id]/page.js
"use client";

import React from "react";
import { useParams, useRouter } from "next/navigation";
import { useAppContext } from "../../context/AppContext";
import Sidebar from "../../components/Sidebar";
import CreativeChecklist from "../../components/campaigns/CreativeChecklist";
import VisualManager from "../../components/campaigns/VisualManager";
import CopyManager from "../../components/campaigns/CopyManager";
import toast from "react-hot-toast";

// --- CONFIG --- //
const statusConfig = {
  Planning:   { bg: "bg-blue-900/50",   text: "text-blue-300" },
  "In Progress": { bg: "bg-yellow-900/50", text: "text-yellow-300" },
  Live:       { bg: "bg-green-900/50",  text: "text-green-300" },
  Completed:  { bg: "bg-gray-800",      text: "text-gray-400" },
};

// --- WIDGET COMPONENTS --- //
const CampaignOverview = ({ campaign }) => (
  <div className="bg-gray-800/50 border border-gray-800 p-6 rounded-xl">
    <div className="flex justify-between items-start">
      <div>
        <h2 className="text-2xl font-bold text-white">{campaign.name}</h2>
        <p className="text-gray-400 mt-1">
          {campaign.objective} • {campaign.branch}
        </p>
        <p className="text-sm text-gray-500 mt-2">
          Timeline: {campaign.startDate} → {campaign.endDate}
        </p>
      </div>
      <span
        className={`inline-flex items-center gap-1.5 px-3 py-1 rounded-full text-sm font-medium ${statusConfig[campaign.status]?.bg} ${statusConfig[campaign.status]?.text}`}
      >
        {campaign.status}
      </span>
    </div>
  </div>
);

const AdCreativeHub = ({ campaign, onCampaignUpdate }) => (
  <div className="space-y-6">
    <CreativeChecklist campaign={campaign} />
    <VisualManager campaign={campaign} onSave={onCampaignUpdate} />
    <CopyManager campaign={campaign} onSave={onCampaignUpdate} />
  </div>
);

const LinkedTasks = ({ campaignId, tasks }) => {
  const campaignTasks = tasks.filter((t) => t.campaignId === campaignId);
  return (
    <div className="bg-gray-800/50 border border-gray-800 p-6 rounded-xl">
      <h3 className="text-xl font-semibold text-white mb-4">✅ Linked Tasks</h3>
      {campaignTasks.length > 0 ? (
        <ul className="space-y-2">
          {campaignTasks.map((t) => (
            <li
              key={t.id}
              className="text-gray-300 bg-gray-900/50 p-3 rounded-md text-sm"
            >
              {t.text}
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-gray-500 text-sm">
          No tasks linked to this campaign yet.
        </p>
      )}
    </div>
  );
};

// --- MAIN PAGE COMPONENT --- //
export default function CampaignDetailPage() {
  const { campaigns, tasks, saveData, loading } = useAppContext();
  const params = useParams();
  const router = useRouter();

  const campaign = campaigns.find((c) => c.id === params.id);

  const handleCampaignUpdate = async (updatedData) => {
    if (!campaign) return;
    try {
      const currentChecklist = campaign.checklist || {};
      const newChecklist = {
        ...currentChecklist,
        primaryText: !!(updatedData.primaryText || campaign.primaryText),
        headlines: (updatedData.headlines || campaign.headlines).some(
          (h) => h.trim() !== ""
        ),
        visuals: updatedData.visuals
          ? Object.values(updatedData.visuals).some((v) => v)
          : currentChecklist.visuals,
      };
      const toSave = { ...campaign, ...updatedData, checklist: newChecklist };
      await saveData("campaigns", toSave);
      toast.success("Campaign updated successfully!");
    } catch (error) {
      console.error("Error updating campaign:", error);
      toast.error("Failed to update campaign. Check console for details.");
    }
  };

  if (loading) {
    return (
      <div className="flex h-screen bg-gray-950 text-white items-center justify-center">
        <p>Loading Campaign Details…</p>
      </div>
    );
  }

  if (!campaign) {
    return (
      <div className="flex h-screen bg-gray-950">
        <Sidebar />
        <main className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-white">
              Campaign Not Found
            </h2>
            <button
              onClick={() => router.push("/campaigns")}
              className="mt-4 px-4 py-2 bg-yellow-400 text-gray-950 rounded-lg hover:bg-yellow-300 transition-colors"
            >
              Back to All Campaigns
            </button>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="font-sans antialiased text-gray-200">
      <div className="flex h-screen bg-gray-950">
        <Sidebar />
        <main className="flex-1 p-6 md:p-8 lg:p-10 flex flex-col gap-6 overflow-y-auto">
          <header>
            <button
              onClick={() => router.back()}
              className="text-sm text-yellow-400 hover:text-yellow-300 mb-2"
            >
              ← Back to Campaigns
            </button>
            <h1 className="text-3xl font-bold text-white">
              Campaign: {campaign.name}
            </h1>
          </header>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-3">
              <CampaignOverview campaign={campaign} />
            </div>
            <div className="lg:col-span-2">
              <AdCreativeHub
                campaign={campaign}
                onCampaignUpdate={handleCampaignUpdate}
              />
            </div>
            <div className="lg:col-span-1">
              <LinkedTasks campaignId={campaign.id} tasks={tasks} />
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}


│   ├── components\
│   │   ├── ErrorBoundary.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\ErrorBoundary.js
--------------------------------------------------------------------------------
// app/components/ErrorBoundary.js
"use client";

import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    // Define a state variable to track whether is an error or not
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // You can also log the error to an error reporting service
    console.error("Uncaught error:", error, errorInfo);
  }

  render() {
    // Check if an error is thrown
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-gray-950 text-white">
          <h2 className="text-2xl font-bold mb-4">Oops, Something Went Wrong</h2>
          <p className="text-gray-400 mb-6">A part of the application failed to load. Please try refreshing the page.</p>
          <button
            onClick={() => this.setState({ hasError: false })}
            className="px-5 py-2.5 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg hover:bg-yellow-300"
          >
            Try Again
          </button>
        </div>
      );
    }

    // Return children components in case of no error
    return this.props.children;
  }
}

export default ErrorBoundary;

│   │   ├── GlobalSearch.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\GlobalSearch.js
--------------------------------------------------------------------------------
// app/components/GlobalSearch.js
"use client";
import React, { useState, useEffect, useMemo, useRef } from 'react';
import { useAppContext } from '../context/AppContext';
import Fuse from 'fuse.js';
import Link from 'next/link';
import { Search, Target, CheckSquare, Notebook } from './icons';

const ResultItem = ({ item, onClick }) => {
    const iconMap = {
        campaign: <Target className="w-5 h-5 text-blue-400" />,
        task: <CheckSquare className="w-5 h-5 text-yellow-400" />,
        note: <Notebook className="w-5 h-5 text-purple-400" />,
    };

    return (
        <Link href={item.href} onClick={onClick}>
            <div className="flex items-center p-3 hover:bg-gray-700 rounded-md cursor-pointer transition-colors">
                <div className="mr-3 flex-shrink-0">{iconMap[item.type]}</div>
                <div>
                    <p className="font-semibold text-white text-sm">{item.title}</p>
                    {item.subtitle && <p className="text-xs text-gray-400">{item.subtitle}</p>}
                </div>
            </div>
        </Link>
    );
};

export default function GlobalSearch() {
    const { campaigns, tasks, notes } = useAppContext();
    const [query, setQuery] = useState('');
    const [results, setResults] = useState([]);
    const [isFocused, setIsFocused] = useState(false);
    const searchRef = useRef(null);

    const fuse = useMemo(() => {
        const allData = [
            ...campaigns.map(c => ({ ...c, type: 'campaign', title: c.name, subtitle: c.objective, href: `/campaigns/${c.id}` })),
            ...tasks.map(t => ({ ...t, type: 'task', title: t.text, subtitle: `In: ${t.campaign || 'Tasks'}`, href: `/tasks` })),
            ...notes.map(n => ({ ...n, type: 'note', title: n.title, subtitle: n.content.substring(0, 30) + '...', href: `/notes` })),
        ];

        return new Fuse(allData, {
            keys: ['title', 'subtitle', 'tags'],
            includeScore: true,
            threshold: 0.4,
        });
    }, [campaigns, tasks, notes]);

    useEffect(() => {
        if (query) {
            const searchResults = fuse.search(query).map(result => result.item);
            setResults(searchResults.slice(0, 10)); // Limit to top 10 results
        } else {
            setResults([]);
        }
    }, [query, fuse]);
    
    // Close results when clicking outside
    useEffect(() => {
        function handleClickOutside(event) {
            if (searchRef.current && !searchRef.current.contains(event.target)) {
                setIsFocused(false);
            }
        }
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, [searchRef]);


    const handleClose = () => {
        setQuery('');
        setIsFocused(false);
    };

    return (
        <div className="relative" ref={searchRef}>
            <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-500" />
                <input
                    type="text"
                    placeholder="Search anything..."
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                    onFocus={() => setIsFocused(true)}
                    className="w-full bg-gray-800 border border-transparent focus:border-yellow-400 focus:ring-yellow-400 rounded-lg pl-10 pr-4 py-2 text-white placeholder-gray-500 transition-colors"
                />
            </div>

            {isFocused && query && (
                <div className="absolute top-full mt-2 w-full bg-gray-800 border border-gray-700 rounded-lg shadow-2xl z-20 p-2 max-h-96 overflow-y-auto">
                    {results.length > 0 ? (
                        <div>
                            {results.map((item) => (
                                <ResultItem key={`${item.type}-${item.id}`} item={item} onClick={handleClose} />
                            ))}
                        </div>
                    ) : (
                        <div className="p-4 text-center text-gray-500">
                            No results found for &quot;{query}&quot;
                        </div>
                    )}
                </div>
            )}
        </div>
    );
}


│   │   ├── Sidebar.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\Sidebar.js
--------------------------------------------------------------------------------
// app/components/Sidebar.js
"use client";
import Link from 'next/link';
import Image from 'next/image';
import { usePathname } from 'next/navigation';
import GlobalSearch from './GlobalSearch'; // <-- Import the new component

import { 
    LayoutDashboard, 
    Target, 
    CheckSquare, 
    Notebook, 
    DollarSign, 
    BatteryIcon,
    TrendingUp
} from './icons';

const NavLink = ({ href, icon, children }) => {
    const pathname = usePathname();
    const isActive = pathname === href;

    const activeClasses = "bg-gray-800 text-white";
    const inactiveClasses = "text-gray-400 hover:bg-gray-800 hover:text-white";

    return (
        <Link href={href} className={`flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors ${isActive ? activeClasses : inactiveClasses}`}>
            {icon}
            {children}
        </Link>
    );
};

export default function Sidebar() {
    return (
        <aside className="w-64 flex-shrink-0 bg-gray-900 text-gray-200 flex-col hidden md:flex p-4 space-y-4">
            <div className="h-16 flex items-center justify-center px-4 border-b border-gray-800 pb-4">
                <BatteryIcon className="w-8 h-8 mr-2 text-yellow-400" />
                <h1 className="text-xl font-bold text-white">AdFlow Hub</h1>
            </div>

            {/* --- NEW: Global Search Bar --- */}
            <GlobalSearch />

            <nav className="flex-1 space-y-2">
                <NavLink href="/" icon={<LayoutDashboard className="w-5 h-5 mr-3" />}>Dashboard</NavLink>
                <NavLink href="/campaigns" icon={<Target className="w-5 h-5 mr-3" />}>Campaigns</NavLink>
                <NavLink href="/tasks" icon={<CheckSquare className="w-5 h-5 mr-3" />}>Tasks</NavLink>
                <NavLink href="/notes" icon={<Notebook className="w-5 h-5 mr-3" />}>Swipe File</NavLink>
                <NavLink href="/budgets" icon={<DollarSign className="w-5 h-5 mr-3" />}>Budgets</NavLink>
                <NavLink href="/analytics" icon={<TrendingUp className="w-5 h-5 mr-3" />}>Analytics</NavLink>
            </nav>
            <div className="mt-auto border-t border-gray-800 pt-4">
                <div className="flex items-center">
                    <Image 
                        className="rounded-full object-cover" 
                        src="https://placehold.co/100x100/eab308/FFFFFF?text=F" 
                        alt="User avatar for Felix" 
                        width={40} 
                        height={40} 
                        aria-label="User Felix, Marketing Lead"
                    />
                     <div className="ml-3">
                        <p className="text-sm font-semibold text-white">Felix</p>
                        <p className="text-xs text-gray-400">Marketing Lead</p>
                    </div>
                 </div>
            </div>
        </aside>
    );
}


│   │   ├── campaigns\
│   │   │   ├── CopyManager.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\campaigns\CopyManager.js
--------------------------------------------------------------------------------
// app/components/campaigns/CopyManager.js
"use client";
import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';

// A new button component for triggering AI generation
const AIGenerateButton = ({ onClick, isLoading, children }) => (
    <button
        type="button"
        onClick={onClick}
        disabled={isLoading}
        className="flex items-center gap-2 text-sm text-yellow-400 hover:text-yellow-300 disabled:text-gray-500 disabled:cursor-wait transition-colors"
    >
        <svg className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M9.9 2.1C8.7 2.5 7.5 3.3 6.5 4.2l-1.4 1.4C4.3 6.4 4 7.2 4 8c0 .8.3 1.6.9 2.2l7.1 7.1c.6.6 1.4.9 2.2.9.8 0 1.6-.3 2.2-.9l1.4-1.4c.9-.9 1.7-2.1 2.1-3.3-.4.2-.8.4-1.3.5-1.3.4-2.6-.2-3.5-1.1l-7-7C9.3 4.3 8.7 3 7.4 2.6c.1-.1.3-.2.4-.3.2-.2.4-.3.6-.5 1.2-.8 2.6-1.2 4-.1zM2.1 14.1A9.9 9.9 0 0 1 12 4.5c.3 0 .6.1.9.1.5 0 1 .1 1.4.2l-1.5 1.5c-1 1-1.5 2.3-1.4 3.6.1 1.3.7 2.5 1.7 3.4l1.5 1.5c-.1.5-.1 1-.2 1.4-.1.3-.1.6-.1.9-4.6.9-8.3-2.8-9.2-7.4-.1-.5-.1-1-.1-1.4 0-.8.3-1.6.9-2.2l1.4-1.4C9.6 7.5 10.5 8.3 11 9.5c.4 1.3-.2 2.6-1.1 3.5l-2 2c-.6.6-.9 1.4-.9 2.2z"/>
        </svg>
        {isLoading ? 'Generating...' : children}
    </button>
);

// A new component to display AI suggestions
const SuggestionsBox = ({ title, suggestions, onSelect, onClear }) => {
    if (!suggestions || suggestions.length === 0) return null;

    return (
        <div className="mt-4 p-4 bg-gray-900/70 border border-gray-700 rounded-lg">
            <div className="flex justify-between items-center mb-2">
                <h4 className="text-md font-semibold text-white">{title}</h4>
                <button onClick={onClear} className="text-xs text-gray-500 hover:text-white">&times; Clear</button>
            </div>
            <div className="space-y-2">
                {suggestions.map((suggestion, index) => (
                    <div key={index} onClick={() => onSelect(suggestion)} className="p-3 bg-gray-800 rounded-md cursor-pointer hover:bg-yellow-900/50 transition-colors">
                        <p className="text-gray-300 text-sm">{suggestion}</p>
                    </div>
                ))}
            </div>
        </div>
    );
};


export default function CopyManager({ campaign, onSave }) {
    const [primaryText, setPrimaryText] = useState('');
    const [headlines, setHeadlines] = useState(['']);
    const [hasChanges, setHasChanges] = useState(false);
    
    // New state for AI features
    const [isGenerating, setIsGenerating] = useState(false);
    const [aiSuggestions, setAiSuggestions] = useState({ primaryText: [], headlines: [] });

    useEffect(() => {
        setPrimaryText(campaign.primaryText || '');
        setHeadlines(campaign.headlines && campaign.headlines.length > 0 ? campaign.headlines : ['']);
        setHasChanges(false); // Reset changes when campaign prop changes
        setAiSuggestions({ primaryText: [], headlines: [] }); // Clear AI suggestions
    }, [campaign]);

    const handlePrimaryTextChange = (e) => {
        setPrimaryText(e.target.value);
        setHasChanges(true);
    };

    const handleHeadlineChange = (index, value) => {
        const newHeadlines = [...headlines];
        newHeadlines[index] = value;
        setHeadlines(newHeadlines);
        setHasChanges(true);
    };

    const addHeadline = () => {
        setHeadlines([...headlines, '']);
        setHasChanges(true);
    };

    const removeHeadline = (index) => {
        if (headlines.length <= 1) return; // Prevent removing the last one
        const newHeadlines = headlines.filter((_, i) => i !== index);
        setHeadlines(newHeadlines);
        setHasChanges(true);
    };

    const handleSave = async () => {
        const finalHeadlines = headlines.filter(h => h.trim() !== '');
        try {
            await toast.promise(
                onSave({ primaryText, headlines: finalHeadlines }),
                {
                    loading: 'Saving copy...',
                    success: 'Copy saved successfully!',
                    error: 'Failed to save copy.',
                }
            );
            setHasChanges(false);
        } catch (error) {
            console.error("Error saving copy:", error);
        }
    };

    // --- NEW AI FUNCTIONALITY ---
    const handleGenerateCopy = async () => {
        setIsGenerating(true);
        setAiSuggestions({ primaryText: [], headlines: [] }); // Clear old suggestions
        toast('🤖 Generating AI copy suggestions...', { icon: '🧠' });

        // Construct a detailed prompt for better results
        const prompt = `
            You are an expert Facebook advertising copywriter. 
            Generate ad copy for a campaign with the following details:
            - Campaign Name: "${campaign.name}"
            - Campaign Objective: "${campaign.objective}"
            - Business Branch: "${campaign.branch}"
            - Business Description: A leading retailer of car batteries and power solutions in South Africa.

            Please provide 3 distinct options for the primary ad text and 5 distinct options for the headlines.
            The tone should be direct, persuasive, and tailored for Facebook users.
            
            Return the response as a valid JSON object with two keys: "primaryTextSuggestions" and "headlineSuggestions". 
            Each key should contain an array of strings.
            Example format: 
            {
                "primaryTextSuggestions": ["Option 1...", "Option 2...", "Option 3..."],
                "headlineSuggestions": ["Headline 1", "Headline 2", "Headline 3", "Headline 4", "Headline 5"]
            }
        `;

        try {
            let chatHistory = [];
            chatHistory.push({ role: "user", parts: [{ text: prompt }] });
            const payload = { 
                contents: chatHistory,
                generationConfig: {
                    responseMimeType: "application/json",
                }
            };
            const apiKey = ""; // This will be handled by the environment
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API request failed with status ${response.status}`);
            }

            const result = await response.json();
            
            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                
                const text = result.candidates[0].content.parts[0].text;
                const parsedJson = JSON.parse(text);

                setAiSuggestions({
                    primaryText: parsedJson.primaryTextSuggestions || [],
                    headlines: parsedJson.headlineSuggestions || []
                });
                toast.success('AI suggestions are ready!');
            } else {
                throw new Error('Unexpected API response structure.');
            }

        } catch (error) {
            console.error("Error generating AI copy:", error);
            toast.error("Couldn't generate AI suggestions. Please try again.");
        } finally {
            setIsGenerating(false);
        }
    };

    return (
        <div className="bg-gray-800/50 border border-gray-800 p-6 rounded-xl mt-6">
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-semibold text-white">📝 Copy & Headlines</h3>
                <AIGenerateButton onClick={handleGenerateCopy} isLoading={isGenerating}>
                    Generate with AI
                </AIGenerateButton>
            </div>
            
            {/* Suggestions Box for Primary Text */}
            <SuggestionsBox
                title="AI Primary Text Suggestions"
                suggestions={aiSuggestions.primaryText}
                onSelect={(text) => {
                    setPrimaryText(text);
                    setHasChanges(true);
                }}
                onClear={() => setAiSuggestions(prev => ({ ...prev, primaryText: [] }))}
            />

            {/* Primary Text Input */}
            <div className="mt-4">
                <label htmlFor="primaryText" className="block text-sm font-medium text-gray-300 mb-1">
                    Primary Text
                </label>
                <textarea
                    id="primaryText"
                    value={primaryText}
                    onChange={handlePrimaryTextChange}
                    className="w-full bg-gray-900 border-gray-700 rounded-lg p-2 text-white h-32"
                    rows="4"
                />
            </div>
            
             {/* Suggestions Box for Headlines */}
            <SuggestionsBox
                title="AI Headline Suggestions"
                suggestions={aiSuggestions.headlines}
                onSelect={(text) => {
                    // Replace the first empty headline or add a new one
                    const emptyIndex = headlines.findIndex(h => h.trim() === '');
                    if (emptyIndex !== -1) {
                        const newHeadlines = [...headlines];
                        newHeadlines[emptyIndex] = text;
                        setHeadlines(newHeadlines);
                    } else {
                        setHeadlines([...headlines, text]);
                    }
                    setHasChanges(true);
                }}
                onClear={() => setAiSuggestions(prev => ({ ...prev, headlines: [] }))}
            />

            {/* Headlines Input */}
            <div className="mt-4">
                <label className="block text-sm font-medium text-gray-300 mb-1">Headlines</label>
                {headlines.map((headline, index) => (
                    <div key={index} className="flex items-center gap-2 mb-2">
                        <input
                            type="text"
                            value={headline}
                            onChange={(e) => handleHeadlineChange(index, e.target.value)}
                            className="w-full bg-gray-900 border-gray-700 rounded-lg p-2 text-white"
                            placeholder={`Headline ${index + 1}`}
                        />
                        <button
                            onClick={() => removeHeadline(index)}
                            className="text-gray-500 hover:text-red-400 disabled:opacity-50"
                            disabled={headlines.length <= 1}
                            aria-label="Remove headline"
                        >
                            &times;
                        </button>
                    </div>
                ))}
                <button
                    onClick={addHeadline}
                    className="text-yellow-400 hover:text-yellow-300 text-sm mt-2"
                >
                    + Add Headline
                </button>
            </div>

            {hasChanges && (
                <div className="flex justify-end mt-6">
                   <button
                       onClick={handleSave}
                       className="px-5 py-2 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg shadow-md hover:bg-yellow-300 transition-colors"
                   >
                     Save Copy
                   </button>
               </div>
           )}
        </div>
    );
}


│   │   │   ├── CreativeChecklist.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\campaigns\CreativeChecklist.js
--------------------------------------------------------------------------------
// app/components/campaigns/CreativeChecklist.js

"use client";
import React from 'react';

const ChecklistItem = ({ label, isChecked }) => (
    <div className="flex items-center bg-gray-900/50 p-3 rounded-lg">
        <div className={`w-5 h-5 flex items-center justify-center rounded-full mr-3 ${isChecked ? 'bg-green-500' : 'bg-gray-700'}`}>
            {isChecked && (
                <svg className="w-3 h-3 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="3" d="M5 13l4 4L19 7" />
                </svg>
            )}
        </div>
        <span className={`capitalize ${isChecked ? 'text-gray-300' : 'text-gray-500'}`}>{label.replace(/([A-Z])/g, ' $1')}</span>
    </div>
);


export default function CreativeChecklist({ campaign }) {
    // If checklist doesn't exist, default to all false to prevent errors
    const checklist = campaign.checklist || {
        primaryText: false,
        headlines: false,
        visuals: false,
        targeting: false,
        budget: false,
    };

    const checklistItems = Object.entries(checklist);
    const completedItems = checklistItems.filter(([_, isChecked]) => isChecked).length;
    const totalItems = checklistItems.length;
    const progress = totalItems > 0 ? (completedItems / totalItems) * 100 : 0;

    return (
        <div className="bg-gray-800/50 border border-gray-800 p-6 rounded-xl">
            <h3 className="text-xl font-semibold text-white mb-4">🚀 Creative Checklist</h3>
            
            {/* Progress Bar */}
            <div className="mb-6">
                <div className="flex justify-between mb-1">
                    <span className="text-base font-medium text-yellow-400">Campaign Progress</span>
                    <span className="text-sm font-medium text-yellow-400">{Math.round(progress)}%</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2.5">
                    <div 
                        className="bg-yellow-400 h-2.5 rounded-full transition-all duration-500" 
                        style={{ width: `${progress}%` }}
                    ></div>
                </div>
            </div>

            {/* Checklist */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {checklistItems.map(([key, isChecked]) => (
                    <ChecklistItem key={key} label={key} isChecked={isChecked} />
                ))}
            </div>
        </div>
    );
}

│   │   │   ├── VisualManager.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\campaigns\VisualManager.js
--------------------------------------------------------------------------------
// app/components/campaigns/VisualManager.js
"use client";

import React, { useState, useEffect } from "react";
import Image from "next/image";
import toast from "react-hot-toast";
import { useAppContext } from "../../context/AppContext";

const AD_FORMATS = ["1:1", "4:5", "9:16"];

export default function VisualManager({ campaign, onSave }) {
  const { uploadFile } = useAppContext();
  const [visuals, setVisuals] = useState({ "1:1": null, "4:5": null, "9:16": null });
  const [hasChanges, setHasChanges] = useState(false);
  const [isUploading, setIsUploading] = useState(null);

  useEffect(() => {
    if (campaign?.visuals) {
      setVisuals(campaign.visuals);
    }
    setHasChanges(false);
  }, [campaign]);

  const handleVisualUpload = async (format, e) => {
    const file = e.target.files[0];
    if (!file) return;

    setIsUploading(format);
    const toastId = toast.loading(`Uploading ${format} visual...`);
    try {
      const downloadURL = await uploadFile(file, "campaign-visuals");
      setVisuals(prev => ({ ...prev, [format]: downloadURL }));
      setHasChanges(true);
      toast.success(`Visual for ${format} uploaded!`, { id: toastId });
    } catch (error) {
      console.error("File upload error:", error);
      toast.error("Upload failed. Please try again.", { id: toastId });
    } finally {
      setIsUploading(null);
    }
  };

  const handleSaveVisuals = () => {
    onSave({ ...campaign, visuals });
    setHasChanges(false);
  };

  return (
    <div className="bg-gray-800/50 border border-gray-800 p-6 rounded-xl mt-6">
      <h3 className="text-xl font-semibold text-white mb-4">🖼️ Visual Assets</h3>
      <div className="space-y-4">
        {AD_FORMATS.map(format => (
          <div key={format}>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              {format} Visual
            </label>
            <input
              type="file"
              accept="image/*,video/*"
              onChange={e => handleVisualUpload(format, e)}
              disabled={isUploading === format}
              className="w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-yellow-400 file:text-gray-950 hover:file:bg-yellow-300 disabled:file:bg-gray-500"
            />
            {isUploading === format && (
              <p className="text-xs text-yellow-400 mt-1">
                Uploading, please wait…
              </p>
            )}
            {visuals[format] && (
              <div className="mt-4 relative w-40 h-40 bg-gray-900 rounded-lg">
                <Image
                  src={visuals[format]}
                  alt={`${format} preview`}
                  fill
                  className="object-cover rounded-lg"
                  onError={e => { e.currentTarget.style.display = 'none'; }}
                />
              </div>
            )}
          </div>
        ))}
      </div>
      {hasChanges && (
        <div className="flex justify-end mt-6">
          <button
            onClick={handleSaveVisuals}
            className="px-5 py-2 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg shadow-md hover:bg-yellow-300 transition-colors"
          >
            Save Visuals
          </button>
        </div>
      )}
    </div>
);
}


│   │   ├── icons\
│   │   │   ├── BatteryIcon.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\BatteryIcon.js
--------------------------------------------------------------------------------
import React from 'react';

const BatteryIcon = ({ className }) => (
    <svg className={className} viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" strokeWidth="0.5" strokeLinecap="round" strokeLinejoin="round">
        <path d="M16,2H8A4,4,0,0,0,4,6V18a4,4,0,0,0,4,4h8a4,4,0,0,0,4-4V6A4,4,0,0,0,16,2Zm-4,3a1,1,0,0,1,1,1V8a1,1,0,0,1-2,0V6A1,1,0,0,1,12,5Zm-2,9H8a1,1,0,0,1,0-2h2a1,1,0,0,1,0,2Zm4,0H14a1,1,0,0,1,0-2h2a1,1,0,0,1,0,2Z" />
    </svg>
);

export default BatteryIcon;

│   │   │   ├── CheckSquare.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\CheckSquare.js
--------------------------------------------------------------------------------
import React from 'react';

const CheckSquare = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <polyline points="9 11 12 14 22 4"></polyline>
        <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
    </svg>
);

export default CheckSquare;

│   │   │   ├── DollarSign.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\DollarSign.js
--------------------------------------------------------------------------------
import React from 'react';

const DollarSign = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <line x1="12" y1="1" x2="12" y2="23"></line>
        <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path>
    </svg>
);

export default DollarSign;

│   │   │   ├── Download.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Download.js
--------------------------------------------------------------------------------
import React from 'react';

const Download = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
        <polyline points="7 10 12 15 17 10"></polyline>
        <line x1="12" y1="15" x2="12" y2="3"></line>
    </svg>
);

export default Download;

│   │   │   ├── Edit.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Edit.js
--------------------------------------------------------------------------------
import React from 'react';

const Edit = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
    </svg>
);

export default Edit;

│   │   │   ├── index.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\index.js
--------------------------------------------------------------------------------
// app/components/icons/index.js

export { default as BatteryIcon } from './BatteryIcon';
export { default as CheckSquare } from './CheckSquare';
export { default as DollarSign } from './DollarSign';
export { default as Download } from './Download';
export { default as Edit } from './Edit';
export { default as LayoutDashboard } from './LayoutDashboard';
export { default as List } from './List';
export { default as MoreVertical } from './MoreVertical';
export { default as Notebook } from './Notebook';
export { default as Plus } from './Plus';
export { default as Store } from './Store';
export { default as Target } from './Target';
export { default as Trello } from './Trello';
export { default as Trash2 } from './Trash2';
export { default as Upload } from './Upload';
export { default as TrendingUp } from './TrendingUp';
export { default as Link } from './Link';
export { default as Search } from './Search'; // <-- Add this line


│   │   │   ├── LayoutDashboard.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\LayoutDashboard.js
--------------------------------------------------------------------------------
import React from 'react';

const LayoutDashboard = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <rect width="7" height="9" x="3" y="3" rx="1"></rect>
        <rect width="7" height="5" x="14" y="3" rx="1"></rect>
        <rect width="7" height="9" x="14" y="12" rx="1"></rect>
        <rect width="7" height="5" x="3" y="16" rx="1"></rect>
    </svg>
);

export default LayoutDashboard;

│   │   │   ├── Link.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Link.js
--------------------------------------------------------------------------------
// app/components/icons/Link.js
import React from 'react';

const Link = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.72"></path>
        <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.72-1.72"></path>
    </svg>
);

export default Link;


│   │   │   ├── List.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\List.js
--------------------------------------------------------------------------------
// app/components/icons/List.js
import React from 'react';

const List = ({ className }) => (
    <svg 
        xmlns="http://www.w3.org/2000/svg" 
        width="24" 
        height="24" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        strokeWidth="2" 
        strokeLinecap="round" 
        strokeLinejoin="round" 
        className={className}
    >
        <line x1="8" y1="6" x2="21" y2="6" />
        <line x1="8" y1="12" x2="21" y2="12" />
        <line x1="8" y1="18" x2="21" y2="18" />
        <line x1="3" y1="6" x2="3.01" y2="6" />
        <line x1="3" y1="12" x2="3.01" y2="12" />
        <line x1="3" y1="18" x2="3.01" y2="18" />
    </svg>
);

export default List;

│   │   │   ├── MoreVertical.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\MoreVertical.js
--------------------------------------------------------------------------------
import React from 'react';

const MoreVertical = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <circle cx="12" cy="12" r="1"></circle>
        <circle cx="12" cy="5" r="1"></circle>
        <circle cx="12" cy="19" r="1"></circle>
    </svg>
);

export default MoreVertical;

│   │   │   ├── Notebook.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Notebook.js
--------------------------------------------------------------------------------
import React from 'react';

const Notebook = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M2 6h4"></path><path d="M2 10h4"></path>
        <path d="M2 14h4"></path><path d="M2 18h4"></path>
        <rect width="16" height="20" x="4" y="2" rx="2"></rect>
        <path d="M16 2v20"></path>
    </svg>
);

export default Notebook;

│   │   │   ├── Plus.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Plus.js
--------------------------------------------------------------------------------
// app/components/icons/Plus.js
import React from 'react';

const Plus = ({ className }) => (
    <svg 
        xmlns="http://www.w3.org/2000/svg" 
        width="24" 
        height="24" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        strokeWidth="2" 
        strokeLinecap="round" 
        strokeLinejoin="round" 
        className={className}
    >
        <path d="M5 12h14"></path>
        <path d="M12 5v14"></path>
    </svg>
);

export default Plus;

│   │   │   ├── Search.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Search.js
--------------------------------------------------------------------------------
// app/components/icons/Search.js
import React from 'react';

const Search = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
    </svg>
);

export default Search;


│   │   │   ├── Store.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Store.js
--------------------------------------------------------------------------------
import React from 'react';

const Store = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7"/>
        <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
        <path d="M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4"/>
        <path d="M2 7h20"/>
        <path d="M22 7v3a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2V7"/>
    </svg>
);

export default Store;

│   │   │   ├── Target.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Target.js
--------------------------------------------------------------------------------
import React from 'react';

const Target = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <circle cx="12" cy="12" r="10"></circle>
        <circle cx="12" cy="12" r="6"></circle>
        <circle cx="12" cy="12" r="2"></circle>
    </svg>
);

export default Target;

│   │   │   ├── Trash2.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Trash2.js
--------------------------------------------------------------------------------
import React from 'react';

const Trash2 = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M3 6h18"></path>
        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
        <line x1="10" y1="11" x2="10" y2="17"></line>
        <line x1="14" y1="11" x2="14" y2="17"></line>
    </svg>
);

export default Trash2;

│   │   │   ├── Trello.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Trello.js
--------------------------------------------------------------------------------
// app/components/icons/Trello.js
import React from 'react';

const Trello = ({ className }) => (
    <svg 
        xmlns="http://www.w3.org/2000/svg" 
        width="24" 
        height="24" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        strokeWidth="2" 
        strokeLinecap="round" 
        strokeLinejoin="round" 
        className={className}
    >
        <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
        <rect x="7" y="7" width="3" height="9" />
        <rect x="14" y="7" width="3" height="5" />
    </svg>
);

export default Trello;

│   │   │   ├── TrendingUp.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\TrendingUp.js
--------------------------------------------------------------------------------
// app/components/icons/TrendingUp.js
import React from 'react';

const TrendingUp = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <polyline points="22 7 13.5 15.5 8.5 10.5 2 17"></polyline>
        <polyline points="16 7 22 7 22 13"></polyline>
    </svg>
);

export default TrendingUp;


│   │   │   ├── Upload.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\icons\Upload.js
--------------------------------------------------------------------------------
import React from 'react';

const Upload = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
        <polyline points="17 8 12 3 7 8"></polyline>
        <line x1="12" y1="3" x2="12" y2="15"></line>
    </svg>
);

export default Upload;

│   │   ├── notes\
│   │   │   ├── NoteCard.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\notes\NoteCard.js
--------------------------------------------------------------------------------
// app/components/notes/NoteCard.js
"use client";
import React, { useState } from 'react';
import { MoreVertical, Edit, Trash2, Link as LinkIcon } from '../icons';
import Image from 'next/image';

export default function NoteCard({ note, onEdit, onDelete }) {
    const [isMenuOpen, setMenuOpen] = useState(false);

    const handleMenuAction = (action) => {
        action();
        setMenuOpen(false);
    };

    return (
        <div className={`rounded-xl shadow-lg flex flex-col ${note.color} border border-gray-700/50`}>
            {/* Display Image if it exists */}
            {note.imageUrl && (
                <div className="relative w-full h-40 bg-gray-900 rounded-t-xl">
                    <Image
                        src={note.imageUrl}
                        alt={`Visual for ${note.title}`}
                        layout="fill"
                        className="object-cover rounded-t-xl"
                        onError={(e) => { e.target.style.display = 'none'; }} // Hide if image fails to load
                    />
                </div>
            )}
            
            <div className="p-4 flex-1 flex flex-col">
                <div className="flex justify-between items-start mb-2">
                    <h3 className="font-bold text-lg text-white break-words pr-2">{note.title}</h3>
                    <div className="relative flex-shrink-0">
                        <button
                            onClick={() => setMenuOpen(!isMenuOpen)}
                            onBlur={() => setTimeout(() => setMenuOpen(false), 150)}
                            className="text-white/60 hover:text-white p-1 rounded-full"
                            aria-expanded={isMenuOpen}
                            aria-label="Note options"
                        >
                            <MoreVertical className="w-5 h-5" />
                        </button>
                        {isMenuOpen && (
                            <div className="absolute right-0 mt-2 w-32 bg-gray-800 border border-gray-700 rounded-md shadow-lg z-10">
                                <button onClick={() => handleMenuAction(() => onEdit(note))} className="w-full text-left flex items-center gap-2 px-4 py-2 text-sm text-gray-300 hover:bg-gray-700" aria-label={`Edit note: ${note.title}`}>
                                    <Edit className="w-4 h-4" /> Edit
                                </button>
                                <button onClick={() => handleMenuAction(() => onDelete(note.id))} className="w-full text-left flex items-center gap-2 px-4 py-2 text-sm text-red-400 hover:bg-gray-700" aria-label={`Delete note: ${note.title}`}>
                                    <Trash2 className="w-4 h-4" /> Delete
                                </button>
                            </div>
                        )}
                    </div>
                </div>
                
                {/* Display Content */}
                <p className="text-white/80 text-sm whitespace-pre-wrap flex-1 break-words mb-4">{note.content}</p>

                {/* Display Tags and Source URL */}
                <div className="mt-auto pt-4 border-t border-white/10">
                    {note.tags && note.tags.length > 0 && (
                        <div className="flex flex-wrap items-center gap-2 mb-3">
                            {note.tags.map(tag => (
                                <span key={tag} className="bg-gray-900/50 text-blue-300 text-xs font-medium px-2 py-1 rounded-full">
                                    #{tag}
                                </span>
                            ))}
                        </div>
                    )}
                    {note.sourceUrl && (
                        <a 
                            href={note.sourceUrl} 
                            target="_blank" 
                            rel="noopener noreferrer" 
                            className="flex items-center gap-2 text-xs text-yellow-400 hover:text-yellow-300 transition-colors"
                        >
                            <LinkIcon className="w-3 h-3" />
                            <span>View Original Source</span>
                        </a>
                    )}
                </div>
            </div>
        </div>
    );
};


│   │   │   ├── NoteEditorModal.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\notes\NoteEditorModal.js
--------------------------------------------------------------------------------
// app/components/notes/NoteEditorModal.js
"use client";
import React, { useEffect, useState } from 'react';
import toast from 'react-hot-toast';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import Image from 'next/image';
import { useAppContext } from '../../context/AppContext'; // Import context

const NOTE_COLORS = ['bg-gray-800', 'bg-red-900/80', 'bg-yellow-900/80', 'bg-green-900/80', 'bg-blue-900/80', 'bg-indigo-900/80', 'bg-purple-900/80', 'bg-pink-900/80'];
const noteSchema = z.object({
    title: z.string().min(1, 'Title is required'),
    content: z.string().min(1, 'Content is required'),
    color: z.string(),
    imageUrl: z.string().nullable(),
    sourceUrl: z.string().url().or(z.literal('')),
    tags: z.array(z.string()),
});

export default function NoteEditorModal({ isOpen, onClose, onSave, noteToEdit }) {
    const { uploadFile } = useAppContext();
    const [isUploading, setIsUploading] = useState(false);
    const { register, handleSubmit, setValue, watch, reset, formState: { errors } } = useForm({
        resolver: zodResolver(noteSchema),
        defaultValues: {
            title: '', content: '', color: NOTE_COLORS[0],
            imageUrl: null, sourceUrl: '', tags: [],
        }
    });
    const [tagInput, setTagInput] = useState('');
    const selectedColor = watch('color');
    const imageUrl = watch('imageUrl');
    const tags = watch('tags');

    useEffect(() => {
        if (isOpen) {
            reset({
                title: noteToEdit?.title || '',
                content: noteToEdit?.content || '',
                color: noteToEdit?.color || NOTE_COLORS[0],
                imageUrl: noteToEdit?.imageUrl || null,
                sourceUrl: noteToEdit?.sourceUrl || '',
                tags: noteToEdit?.tags || [],
            });
        }
    }, [isOpen, noteToEdit, reset]);

    useEffect(() => {
        Object.values(errors).forEach(error => {
            if (error.message) toast.error(error.message);
        });
    }, [errors]);

    if (!isOpen) return null;

    // FIX: Made the onSubmit function async to properly await the save.
    const onSubmit = async (data) => {
        const noteToSave = {
            ...noteToEdit, ...data, id: noteToEdit?.id,
            createdAt: noteToEdit?.createdAt || new Date().toISOString()
        };
        // The onSave prop is already a promise, so we await it here.
        await onSave(noteToSave);
    };

    const handleImageUpload = async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        setIsUploading(true);
        const toastId = toast.loading("Uploading image...");

        try {
            const downloadURL = await uploadFile(file, 'note-images');
            setValue('imageUrl', downloadURL, { shouldValidate: true });
            toast.success("Image uploaded!", { id: toastId });
        } catch (error) {
            console.error("File upload error:", error);
            toast.error("Upload failed. Please try again.", { id: toastId });
        } finally {
            setIsUploading(false);
        }
    };

    const handleTagKeyDown = (e) => {
        if (e.key === 'Enter' || e.key === ',') {
            e.preventDefault();
            const newTag = tagInput.trim();
            if (newTag && !tags.includes(newTag)) {
                setValue('tags', [...tags, newTag], { shouldValidate: true });
            }
            setTagInput('');
        }
    };

    const removeTag = (tagToRemove) => {
        setValue('tags', tags.filter(tag => tag !== tagToRemove), { shouldValidate: true });
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div className="bg-gray-900 border border-gray-800 w-full max-w-2xl rounded-xl shadow-2xl m-4">
                <form onSubmit={handleSubmit(onSubmit)}>
                    <div className="flex items-center justify-between p-6 border-b border-gray-800">
                        <h3 className="text-xl font-semibold text-white">{noteToEdit ? 'Edit Swipe File Entry' : 'Create Swipe File Entry'}</h3>
                        <button type="button" onClick={onClose} className="text-gray-400 hover:text-white text-3xl leading-none" aria-label="Close modal">&times;</button>
                    </div>
                    <div className="p-6 space-y-4 max-h-[70vh] overflow-y-auto">
                        <div>
                            <label htmlFor="noteImage" className="block text-sm font-medium text-gray-300 mb-1">Ad Creative (Image/Video Screenshot)</label>
                            <input type="file" id="noteImage" accept="image/*,video/*" onChange={handleImageUpload} disabled={isUploading} className="w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-yellow-400 file:text-gray-950 hover:file:bg-yellow-300 disabled:file:bg-gray-500" />
                            {isUploading && <p className="text-xs text-yellow-400 mt-1">Uploading, please wait...</p>}
                            {imageUrl && (
                                <div className="mt-4 relative w-full h-48 bg-gray-800 rounded-lg">
                                    <Image src={imageUrl} alt="Creative preview" layout="fill" className="object-contain rounded-lg" />
                                </div>
                            )}
                        </div>
                        <div>
                            <label htmlFor="noteTitle" className="block text-sm font-medium text-gray-300 mb-1">Title / Headline</label>
                            <input {...register("title")} id="noteTitle" placeholder="e.g., Awesome Competitor Video Ad" className="w-full bg-gray-800 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400" />
                        </div>
                        <div>
                            <label htmlFor="sourceUrl" className="block text-sm font-medium text-gray-300 mb-1">Source URL (Optional)</label>
                            <input {...register("sourceUrl")} id="sourceUrl" placeholder="e.g., https://facebook.com/ads/library/..." className="w-full bg-gray-800 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400" />
                        </div>
                        <div>
                            <label htmlFor="noteContent" className="block text-sm font-medium text-gray-300 mb-1">Analysis / Notes</label>
                            <textarea {...register("content")} id="noteContent" rows="4" placeholder="Jot down your analysis..." className="w-full bg-gray-800 border border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400"></textarea>
                        </div>
                        <div>
                            <label htmlFor="tags" className="block text-sm font-medium text-gray-300 mb-1">Tags</label>
                            <div className="flex flex-wrap items-center gap-2 p-2 bg-gray-800 border border-gray-700 rounded-lg">
                                {tags.map(tag => (
                                    <div key={tag} className="flex items-center gap-1 bg-blue-900/80 text-blue-300 text-xs font-medium px-2 py-1 rounded-full">
                                        {tag}
                                        <button type="button" onClick={() => removeTag(tag)} className="text-blue-200 hover:text-white">&times;</button>
                                    </div>
                                ))}
                                <input id="tags" value={tagInput} onChange={e => setTagInput(e.target.value)} onKeyDown={handleTagKeyDown} placeholder="Add a tag and press Enter" className="flex-1 bg-transparent text-white outline-none" />
                            </div>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">Color</label>
                            <div className="flex gap-3">
                                {NOTE_COLORS.map(colorClass => (
                                    <button type="button" key={colorClass} onClick={() => setValue('color', colorClass)} className={`w-8 h-8 rounded-full ${colorClass} transition-transform duration-150 ${selectedColor === colorClass ? 'ring-2 ring-offset-2 ring-offset-gray-900 ring-white' : 'hover:scale-110'}`} aria-label={`Select color ${colorClass.split('-')[1]}`}></button>
                                ))}
                            </div>
                        </div>
                    </div>
                    <div className="flex items-center justify-end p-6 border-t border-gray-800 space-x-2">
                        <button type="button" onClick={onClose} className="px-4 py-2 text-sm font-medium bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">Cancel</button>
                        <button type="submit" className="px-4 py-2 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg hover:bg-yellow-300 transition-colors">Save Entry</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

│   │   ├── ui\
│   │   │   ├── ConfirmationModal.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\ui\ConfirmationModal.js
--------------------------------------------------------------------------------
// app/components/ui/ConfirmationModal.js
"use client";
import React from 'react';

export default function ConfirmationModal({ isOpen, onClose, onConfirm, message, confirmText = "Confirm", confirmColor = "bg-red-500" }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50" role="alertdialog" aria-modal="true" aria-labelledby="confirmation-message">
      <div className="bg-gray-900 border border-gray-800 p-6 rounded-xl shadow-2xl m-4 max-w-sm w-full">
        <p id="confirmation-message" className="text-white mb-6 text-lg">{message}</p>
        <div className="flex justify-end gap-3">
          <button onClick={onClose} className="px-5 py-2 text-sm font-medium bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">Cancel</button>
          <button onClick={onConfirm} className={`px-5 py-2 text-sm font-semibold text-gray-950 ${confirmColor} rounded-lg hover:opacity-90 transition-colors`}>
            {confirmText}
          </button>
        </div>
      </div>
    </div>
  );
};

│   │   │   ├── SkeletonCard.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\components\ui\SkeletonCard.js
--------------------------------------------------------------------------------
// app/components/ui/SkeletonCard.js
"use client";

export default function SkeletonCard() {
    return (
        <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl animate-pulse">
            <div className="h-4 bg-gray-700 rounded w-3/4 mb-4"></div>
            <div className="h-8 bg-gray-700 rounded w-1/2"></div>
        </div>
    );
}

│   ├── context\
│   │   ├── AppContext.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\context\AppContext.js
--------------------------------------------------------------------------------
// app/context/AppContext.js
"use client";
import React, { createContext, useContext, useState, useEffect } from 'react';
import { db, storage } from '../lib/firebase';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { collection, onSnapshot, doc, setDoc, deleteDoc, Timestamp } from 'firebase/firestore';
import toast from 'react-hot-toast';
import { v4 as uuidv4 } from 'uuid';

const initialData = {
  campaigns: [
    {
      id: 'camp-1',
      name: 'Summer Sale Kickoff',
      branch: 'National',
      objective: 'Sales',
      startDate: '2024-08-01',
      endDate: '2024-08-15',
      primaryText: 'Get ready for the hottest deals of the summer!',
      headlines: ['50% Off Everything!', 'Limited Time Only'],
      visuals: { "1:1": null, "4:5": null, "9:16": null },
      targetValue: 50000,
      budgetId: 'budget-1',
      status: 'Completed',
      checklist: { primaryText: true, headlines: true, visuals: false, targeting: true, budget: true },
    }
  ],
  tasks: [
    { id: 'task-1', text: 'Design visuals for Summer Sale', campaign: 'Summer Sale Kickoff', campaignId: 'camp-1', status: 'To Do' },
    { id: 'task-2', text: 'Write ad copy for Alberton opening', campaign: 'Alberton Grand Opening', campaignId: 'camp-2', status: 'In Progress' },
    { id: 'task-3', text: 'Finalize budget allocation', campaign: 'Summer Sale Kickoff', campaignId: 'camp-1', status: 'Done' },
  ],
  notes: [
    {
      id: 'note-1',
      title: 'Q3 Marketing Ideas',
      content: '- Focus on video content\n- Collaborate with local influencers',
      color: 'bg-blue-900/80',
      createdAt: new Date().toISOString(),
      imageUrl: null,
      sourceUrl: '',
      tags: ['strategy', 'video'],
    },
    {
      id: 'note-2',
      title: 'Competitor Ad Example',
      content: 'This ad from a competitor has a great call-to-action. The use of urgency is very effective.',
      color: 'bg-yellow-900/80',
      createdAt: new Date().toISOString(),
      imageUrl: 'https://placehold.co/600x400/1e1b4b/eab308?text=Ad+Screenshot',
      sourceUrl: 'https://www.facebook.com/ads/library',
      tags: ['competitor-x', 'strong-cta'],
    },
  ],
  budgets: [
    { id: 'budget-1', name: 'Summer Sale Kickoff', branch: 'National', totalBudget: 25000, spent: 18500, status: 'Completed', startDate: '2024-08-01' },
    { id: 'budget-2', name: 'Alberton Grand Opening', branch: 'Alberton', totalBudget: 5000, spent: 4500, status: 'Live', startDate: '2024-09-01' },
  ],
};

const AppContext = createContext();

export function AppProvider({ children }) {
  const isDev = process.env.NODE_ENV === 'development';
  const [campaigns, setCampaigns] = useState([]);
  const [tasks, setTasks] = useState([]);
  const [notes, setNotes] = useState([]);
  const [budgets, setBudgets] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // In development, use hardcoded data to avoid
    // hitting Firestore quotas and for faster local development.
    if (isDev) {
      setCampaigns(initialData.campaigns);
      setTasks(initialData.tasks);
      setNotes(initialData.notes);
      setBudgets(initialData.budgets);
      setLoading(false);
      return;
    }

    // In production, fetch data from Firestore and subscribe to real-time updates
    const unsubscribes = [
      onSnapshot(collection(db, 'campaigns'), (snapshot) => {
        setCampaigns(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        setLoading(false);
      }),
      onSnapshot(collection(db, 'tasks'), (snapshot) => {
        setTasks(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        setLoading(false);
      }),
      onSnapshot(collection(db, 'notes'), (snapshot) => {
        setNotes(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        setLoading(false);
      }),
      onSnapshot(collection(db, 'budgets'), (snapshot) => {
        setBudgets(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        setLoading(false);
      }),
    ];

    return () => unsubscribes.forEach(unsub => unsub());
  }, [isDev]);


  // Save or update an entry in Firestore
  const saveData = async (collectionName, data) => {
    const dataToSave = { ...data };
    let docRef;

    if (dataToSave.id) {
      docRef = doc(db, collectionName, dataToSave.id);
    } else {
      docRef = doc(collection(db, collectionName));
      dataToSave.id = docRef.id;
    }

    await setDoc(docRef, dataToSave);
  };

  // Delete an entry by ID from Firestore
  const deleteData = async (collectionName, id) => {
    await deleteDoc(doc(db, collectionName, id));
  };


  // Upload a file to Firebase Storage and return its download URL
  const uploadFile = async (file, folder) => {
    setLoading(true);
    try {
      const timestamp = Date.now();
      const fileRef = ref(storage, `${folder}/${timestamp}_${file.name}`);
      await uploadBytes(fileRef, file);
      const url = await getDownloadURL(fileRef);
      return url;
    } finally {
      setLoading(false);
    }
  };

  const value = {
    campaigns,
    tasks,
    notes,
    budgets,
    setCampaigns,
    setTasks,
    setNotes,
    setBudgets,
    loading,
    saveData,
    deleteData,
    uploadFile,
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
}

export function useAppContext() {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
}

│   ├── hooks\
│   │   ├── useAccessibleKanban.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\hooks\useAccessibleKanban.js
--------------------------------------------------------------------------------
// app/hooks/useAccessibleKanban.js
"use client";
import { useState } from 'react';
import toast from 'react-hot-toast';

export function useAccessibleKanban({ saveData, collectionName, columns }) {
  const [draggedItem, setDraggedItem] = useState(null);
  const [keyboardSelectedItem, setKeyboardSelectedItem] = useState(null);

  // Mouse drag-and-drop handlers
  const handleDragStart = (e, item) => {
    setDraggedItem(item);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDrop = async (e, newStatus) => {
    e.preventDefault();
    if (draggedItem && draggedItem.status !== newStatus) {
      await updateItemStatus(draggedItem, newStatus);
    }
    setDraggedItem(null);
  };

  // Keyboard interaction handler
  const handleKeyDown = async (e, item) => {
    // On Space or Enter, select/deselect the item
    if (e.key === ' ' || e.key === 'Enter') {
      e.preventDefault();
      if (keyboardSelectedItem?.id === item.id) {
        setKeyboardSelectedItem(null); // Deselect
        toast.success(`${collectionName.slice(0, -1)} deselected.`);
      } else {
        setKeyboardSelectedItem(item); // Select
        toast.success(`${collectionName.slice(0, -1)} selected. Use arrow keys to move.`);
      }
    }

    // On Escape, cancel selection
    if (e.key === 'Escape' && keyboardSelectedItem) {
      e.preventDefault();
      setKeyboardSelectedItem(null);
      toast.success('Move cancelled.');
    }

    // On ArrowRight or ArrowLeft, move the selected item
    if ((e.key === 'ArrowRight' || e.key === 'ArrowLeft') && keyboardSelectedItem && keyboardSelectedItem.id === item.id) {
        e.preventDefault();
        const currentIndex = columns.indexOf(keyboardSelectedItem.status);
        
        let newIndex;
        if (e.key === 'ArrowRight') {
            newIndex = Math.min(currentIndex + 1, columns.length - 1);
        } else { // ArrowLeft
            newIndex = Math.max(currentIndex - 1, 0);
        }

        if (newIndex !== currentIndex) {
            const newStatus = columns[newIndex];
            await updateItemStatus(keyboardSelectedItem, newStatus);
            // Keep the item selected but update its status for the next move
            setKeyboardSelectedItem(prev => ({ ...prev, status: newStatus }));
        }
    }
  };
  
  // Helper function to save the updated item
  const updateItemStatus = async (item, newStatus) => {
    const updatedItem = { ...item, status: newStatus };
    try {
      await saveData(collectionName, updatedItem);
      toast.success(`Status updated to ${newStatus}!`);
    } catch (error) {
      console.error(`Error updating ${collectionName} status:`, error);
      toast.error(`Failed to update status.`);
    }
  };

  return { 
    draggedItem, 
    keyboardSelectedItem,
    handleDragStart, 
    handleDrop, 
    handleKeyDown 
  };
}

│   │   ├── useTasks.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\hooks\useTasks.js
--------------------------------------------------------------------------------
// app/hooks/useTasks.js
"use client";
import { useState } from 'react';
import { useAppContext } from '../context/AppContext';
import toast from 'react-hot-toast';

export function useTasks() {
  const { saveData } = useAppContext();
  const [draggedTask, setDraggedTask] = useState(null);

  const handleDragStart = (e, task) => {
    setDraggedTask(task);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDrop = async (e, newStatus) => {
    e.preventDefault();
    if (draggedTask && draggedTask.status !== newStatus) {
      const updatedTask = { ...draggedTask, status: newStatus };
      try {
        await saveData('tasks', updatedTask);
        toast.success(`Task status updated to ${newStatus}!`);
      } catch (error) {
        console.error("Error updating task status:", error);
        toast.error('Failed to update task status.');
      }
    }
    setDraggedTask(null);
  };
  
  return { draggedTask, handleDragStart, handleDrop };
}

│   ├── lib\
│   │   ├── firebase.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\lib\firebase.js
--------------------------------------------------------------------------------
// app/lib/firebase.js
import { initializeApp, getApps } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";
import { getAuth } from "firebase/auth";

// --- This is YOUR Firebase configuration ---
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};
// ---------------------------------------------

// Initialize Firebase
let app;
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
} else {
  app = getApps()[0];
}

const db = getFirestore(app);
const storage = getStorage(app);
const auth = getAuth(app);

export { db, storage, auth };

│   ├── notes\
│   │   ├── NoteClientView.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\notes\NoteClientView.js
--------------------------------------------------------------------------------
// app/notes/NoteClientView.js
"use client";
import React, { useState, useMemo } from 'react';
import Sidebar from '../components/Sidebar';
import { useAppContext } from '../context/AppContext';
import toast from 'react-hot-toast';
import ConfirmationModal from '../components/ui/ConfirmationModal';
import NoteCard from '../components/notes/NoteCard';
import NoteEditorModal from '../components/notes/NoteEditorModal';
import { Plus, Search } from '../components/icons';

export default function NoteClientView() {
    const { notes, saveData, deleteData, loading } = useAppContext();
    const [isEditorOpen, setEditorOpen] = useState(false);
    const [noteToEdit, setNoteToEdit] = useState(null);
    const [isConfirmOpen, setConfirmOpen] = useState(false);
    const [noteToDelete, setNoteToDelete] = useState(null);
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedTags, setSelectedTags] = useState([]);

    const handleSaveNote = async (savedNote) => {
        try {
            await toast.promise(saveData('notes', savedNote), {
                loading: 'Saving note...',
                success: 'Note saved successfully!',
                error: 'Failed to save note.',
            });
            // This is crucial: close the modal only after the save is complete.
            setEditorOpen(false);
        } catch (error) {
            console.error("Error saving note: ", error);
        }
    };

    const handleOpenCreateModal = () => {
        setNoteToEdit(null);
        setEditorOpen(true);
    };

    const handleOpenEditModal = (note) => {
        setNoteToEdit(note);
        setEditorOpen(true);
    };

    const handleDelete = (id) => {
        setNoteToDelete(id);
        setConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!noteToDelete) return;
        try {
            await deleteData('notes', noteToDelete);
            toast.success('Note deleted.');
        } catch (error) {
            toast.error('Failed to delete note.');
        } finally {
            setConfirmOpen(false);
            setNoteToDelete(null);
        }
    };

    const allTags = useMemo(() => {
        const tagsSet = new Set(notes.flatMap(note => note.tags || []));
        return Array.from(tagsSet);
    }, [notes]);

    const filteredNotes = useMemo(() => {
        return notes
            .filter(note => {
                const query = searchQuery.toLowerCase();
                const inTitle = note.title.toLowerCase().includes(query);
                const inContent = note.content.toLowerCase().includes(query);
                const searchMatch = inTitle || inContent;

                const tagsMatch = selectedTags.length === 0 || selectedTags.every(tag => (note.tags || []).includes(tag));

                return searchMatch && tagsMatch;
            })
            .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    }, [notes, searchQuery, selectedTags]);

    const handleTagClick = (tag) => {
        setSelectedTags(prev =>
            prev.includes(tag) ? prev.filter(t => t !== tag) : [...prev, tag]
        );
    };

    if (loading) {
        return (
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main id="main-content" className="flex-1 p-6 md:p-8 lg:p-10">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4 flex-shrink-0">
                        <div>
                            <div className="h-9 bg-gray-700 rounded w-48 mb-2 animate-pulse"></div>
                            <div className="h-5 bg-gray-700 rounded w-64 animate-pulse"></div>
                        </div>
                        <div className="flex items-center gap-2">
                            <div className="h-11 bg-gray-700 rounded-lg w-32 animate-pulse"></div>
                            <div className="h-11 bg-gray-700 rounded-lg w-32 animate-pulse"></div>
                        </div>
                    </header>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl animate-pulse">
                            <div className="h-4 bg-gray-700 rounded w-3/4 mb-4"></div>
                            <div className="h-8 bg-gray-700 rounded w-1/2"></div>
                        </div>
                        <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl animate-pulse">
                            <div className="h-4 bg-gray-700 rounded w-3/4 mb-4"></div>
                            <div className="h-8 bg-gray-700 rounded w-1/2"></div>
                        </div>
                        <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl animate-pulse">
                            <div className="h-4 bg-gray-700 rounded w-3/4 mb-4"></div>
                            <div className="h-8 bg-gray-700 rounded w-1/2"></div>
                        </div>
                        <div className="bg-gray-800/50 border border-gray-800 p-5 rounded-xl animate-pulse">
                            <div className="h-4 bg-gray-700 rounded w-3/4 mb-4"></div>
                            <div className="h-8 bg-gray-700 rounded w-1/2"></div>
                        </div>
                    </div>
                </main>
            </div>
        );
    }

    return (
        <div className="font-sans antialiased text-gray-200">
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main id="main-content" className="flex-1 p-6 md:p-8 lg:p-10 flex flex-col">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4 flex-shrink-0">
                        <div>
                            <h2 className="text-3xl font-bold text-white">Creative Swipe File</h2>
                            <p className="text-gray-400 mt-1">Your library of ad inspiration and ideas.</p>
                        </div>
                        <div className="flex items-center gap-2">
                            <button onClick={handleOpenCreateModal} className="px-5 py-2.5 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg shadow-md hover:bg-yellow-300 transition-colors flex items-center justify-center gap-2 whitespace-nowrap" aria-label="Create New Entry">
                                <Plus className="w-5 h-5" /> Add Entry
                            </button>
                        </div>
                    </header>

                    <div className="flex flex-col md:flex-row gap-4 mb-6 flex-shrink-0">
                        <div className="relative flex-1">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-500" />
                            <input
                                type="text"
                                placeholder="Search by title or content..."
                                value={searchQuery}
                                onChange={e => setSearchQuery(e.target.value)}
                                className="w-full bg-gray-800 border border-gray-700/50 rounded-lg py-2 pl-10 pr-4 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400"
                            />
                        </div>
                        <div className="flex items-center gap-2 overflow-x-auto pb-2">
                             <span className="text-sm text-gray-400 flex-shrink-0">Filter by Tag:</span>
                             {allTags.map(tag => (
                                <button
                                    key={tag}
                                    onClick={() => handleTagClick(tag)}
                                    className={`px-3 py-1 text-xs font-medium rounded-full transition-colors flex-shrink-0 ${selectedTags.includes(tag) ? 'bg-blue-500 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}
                                >
                                    #{tag}
                                </button>
                             ))}
                        </div>
                    </div>

                    <div className="flex-1 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 overflow-y-auto pb-4">
                        {filteredNotes.length > 0 ? (
                            filteredNotes.map(note => (
                                <NoteCard key={note.id} note={note} onEdit={handleOpenEditModal} onDelete={handleDelete} />
                            ))
                        ) : (
                            <div className="col-span-full flex flex-col items-center justify-center text-center text-gray-500 h-full">
                                <p className="text-lg font-semibold">No Matching Notes Found</p>
                                <p>Try adjusting your search or filters.</p>
                            </div>
                        )}
                    </div>
                </main>
                <NoteEditorModal isOpen={isEditorOpen} onClose={() => setEditorOpen(false)} onSave={handleSaveNote} noteToEdit={noteToEdit} />
                <ConfirmationModal
                    isOpen={isConfirmOpen}
                    onClose={() => setConfirmOpen(false)}
                    onConfirm={confirmDelete}
                    message="Are you sure you want to delete this entry?"
                />
            </div>
        </div>
    );
}

│   │   ├── page.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\notes\page.js
--------------------------------------------------------------------------------
// app/notes/page.js
"use client"; // This page now only renders a client component.

import NoteClientView from './NoteClientView';

// This is now a simple component that renders the client view.
// No data fetching is needed here anymore.
export default function NotesPage() {
    // The NoteClientView will get all its data from the AppContext.
    // We pass an empty array for the initial prop as it is no longer used.
    return <NoteClientView initialNotes={[]} />;
}


│   ├── tasks\
│   │   ├── page.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\tasks\page.js
--------------------------------------------------------------------------------
// app/tasks/page.js
"use client"; // This page now only renders a client component.

import TaskClientView from './TaskClientView';

// This is now a simple component that renders the client view.
// No data fetching is needed here anymore.
export default function TasksPage() {
    // The TaskClientView will get all its data from the AppContext.
    // We pass empty arrays for initial props as they are no longer used.
    return <TaskClientView initialTasks={[]} initialCampaigns={[]} />;
}


│   │   ├── TaskClientView.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\tasks\TaskClientView.js
--------------------------------------------------------------------------------
// app/tasks/TaskClientView.js
"use client";
import React, { useState } from 'react';
import dynamic from 'next/dynamic';
import Sidebar from '../components/Sidebar';
import { useAppContext } from '../context/AppContext';
import toast from 'react-hot-toast';
// CHANGE: Import the new accessible hook
import { useAccessibleKanban } from '../hooks/useAccessibleKanban'; 
import ConfirmationModal from '../components/ui/ConfirmationModal';
import SkeletonCard from '../components/ui/SkeletonCard';
import { Target, Plus, MoreVertical, Edit, Trash2 } from '../components/icons';

const TaskEditorModal = dynamic(() => import('./TaskEditorModal'), {
    loading: () => <p className="text-center p-4">Loading Editor...</p>,
    ssr: false
});
const statusConfig = {
    "To Do": { colorClass: "bg-gray-500", text: "text-gray-400" },
    "In Progress": { colorClass: "bg-blue-500", text: "text-blue-300" },
    "Done": { colorClass: "bg-green-500", text: "text-green-300" },
};
const priorityConfig = { "High": "bg-red-500", "Medium": "bg-yellow-500", "Low": "bg-green-500" };
const KANBAN_COLUMNS = ["To Do", "In Progress", "Done"];

// UPDATE: TaskCard now accepts props for keyboard accessibility
const TaskCard = ({ task, onEdit, onDelete, onDragStart, onKeyDown, isDragging, isKeyboardSelected }) => {
    const [isMenuOpen, setMenuOpen] = useState(false);
    return (
        <div 
            draggable 
            onDragStart={onDragStart} 
            // Add keyboard event handler and tabindex to make it focusable
            onKeyDown={onKeyDown}
            tabIndex={0}
            className={`bg-gray-800/80 p-4 rounded-lg cursor-grab active:cursor-grabbing transition-all ${isDragging ? 'opacity-50' : 'opacity-100'} ${isKeyboardSelected ? 'ring-2 ring-yellow-400 shadow-lg' : 'focus:ring-2 focus:ring-blue-400'}`}
            // Add ARIA attributes for screen readers
            role="button"
            aria-roledescription="Draggable task"
            aria-grabbed={isKeyboardSelected}
        >
            <div className="flex justify-between items-start mb-2">
                <p className="font-semibold text-white pr-4 break-words">{task.text}</p>
                <div className="relative flex-shrink-0">
                    <button
                        onClick={() => setMenuOpen(!isMenuOpen)}
                        onBlur={() => setTimeout(() => setMenuOpen(false), 150)}
                        className="text-gray-500 hover:text-white"
                        aria-expanded={isMenuOpen}
                        aria-haspopup="true"
                        aria-label="Task options"
                    >
                        <MoreVertical className="w-5 h-5" />
                    </button>
                    {isMenuOpen && (
                        <div className="absolute right-0 mt-2 w-32 bg-gray-700 border border-gray-600 rounded-md shadow-lg z-10">
                            <button onClick={() => { onEdit(task); setMenuOpen(false); }} className="w-full text-left flex items-center gap-2 px-4 py-2 text-sm text-gray-300 hover:bg-gray-600" aria-label="Edit task">
                                <Edit className="w-4 h-4" /> Edit
                            </button>
                            <button onClick={() => { onDelete(task.id); setMenuOpen(false); }} className="w-full text-left flex items-center gap-2 px-4 py-2 text-sm text-red-400 hover:bg-gray-600" aria-label="Delete task">
                                <Trash2 className="w-4 h-4" /> Delete
                            </button>
                        </div>
                    )}
                </div>
            </div>
            <div className="flex items-center justify-between mt-2">
                <p className="text-xs text-blue-400 bg-blue-900/50 px-2 py-0.5 rounded-full flex items-center gap-1.5">
                    <Target className="w-3 h-3" />
                    {task.campaign || 'Unassigned'}
                </p>
                <span className={`w-3 h-3 rounded-full ${priorityConfig[task.priority]}`} title={`Priority: ${task.priority}`}></span>
            </div>
        </div>
    );
};

export default function TaskClientView({ initialCampaigns }) {
    const { tasks, campaigns, loading, saveData, deleteData } = useAppContext();
    // CHANGE: Use the new accessible hook
    const { 
        draggedItem, 
        keyboardSelectedItem,
        handleDragStart, 
        handleDrop, 
        handleKeyDown 
    } = useAccessibleKanban({ saveData, collectionName: 'tasks' });
    
    const [isModalOpen, setModalOpen] = useState(false);
    const [taskToEdit, setTaskToEdit] = useState(null);
    const [isConfirmOpen, setConfirmOpen] = useState(false);
    const [taskToDelete, setTaskToDelete] = useState(null);

    const handleOpenCreateModal = () => { setTaskToEdit(null); setModalOpen(true); };
    const handleOpenEditModal = (task) => { setTaskToEdit(task); setModalOpen(true); };

    const handleSaveTask = async (savedTask) => {
        try {
            await toast.promise(saveData('tasks', savedTask), {
                loading: 'Saving task...',
                success: 'Task saved successfully!',
                error: 'Failed to save task.',
            });
            setModalOpen(false);
        } catch (error) {
            console.error("Error saving task:", error);
        }
    };

    const handleDelete = (id) => {
        setTaskToDelete(id);
        setConfirmOpen(true);
    };

    const confirmDelete = async () => {
        if (!taskToDelete) return;
        try {
            await deleteData('tasks', taskToDelete);
            toast.success('Task deleted successfully!');
        } catch (error) {
            toast.error('Failed to delete task.');
            console.error("Error deleting task:", error);
        } finally {
            setConfirmOpen(false);
            setTaskToDelete(null);
        }
    };
    
    if (loading) {
        // Skeleton loading state remains the same...
        return (
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main id="main-content" className="flex-1 p-6 md:p-8 lg:p-10 flex flex-col">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4 flex-shrink-0">
                        <div>
                           <div className="h-9 bg-gray-700 rounded w-48 mb-2 animate-pulse"></div>
                           <div className="h-5 bg-gray-700 rounded w-72 animate-pulse"></div>
                        </div>
                    </header>
                    <div className="flex-1 grid grid-cols-1 md:grid-cols-3 gap-6 overflow-x-auto">
                        {KANBAN_COLUMNS.map(status => (
                             <div key={status} className="bg-gray-900/70 rounded-xl flex flex-col min-w-[300px]">
                                <div className="p-4 border-b border-gray-800">
                                    <div className="h-6 bg-gray-700 rounded w-1/2 animate-pulse"></div>
                                 </div>
                                <div className="p-4 space-y-4">
                                    <SkeletonCard /><SkeletonCard />
                                </div>
                            </div>
                        ))}
                    </div>
                </main>
            </div>
        );
    }

    return (
        <div className="font-sans antialiased text-gray-200">
            <div className="flex h-screen bg-gray-950">
                <Sidebar />
                <main id="main-content" className="flex-1 p-6 md:p-8 lg:p-10 flex flex-col">
                    <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4 flex-shrink-0">
                        <div>
                            <h2 className="text-3xl font-bold text-white">Tasks Board</h2>
                            <p className="text-gray-400 mt-1">Organize your workflow from &apos;To Do&apos; to &apos;Done&apos;.</p>
                        </div>
                        <div className="flex items-center gap-2">
                            <button onClick={handleOpenCreateModal} className="px-5 py-2.5 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg shadow-md hover:bg-yellow-300 transition-colors flex items-center justify-center gap-2 whitespace-nowrap" aria-label="Create New Task">
                                <Plus className="w-5 h-5" />Create Task
                            </button>
                        </div>
                    </header>
                     <div className="flex-1 grid grid-cols-1 md:grid-cols-3 gap-6 overflow-x-auto">
                        {KANBAN_COLUMNS.map(status => (
                            <div 
                                key={status} 
                                onDragOver={(e) => e.preventDefault()} 
                                onDrop={(e) => handleDrop(e, status)} 
                                className="bg-gray-900/70 border-dashed border-2 border-transparent data-[is-over=true]:border-yellow-400/50 rounded-xl flex flex-col min-w-[300px]" 
                                data-is-over={!!draggedItem && draggedItem.status !== status}
                            >
                                <div className="p-4 border-b border-gray-800 flex-shrink-0">
                                    <h3 className="font-semibold text-white flex items-center gap-2">
                                        <span className={`w-3 h-3 rounded-full ${statusConfig[status].colorClass}`}></span>
                                        {status}
                                        <span className="ml-auto text-sm text-gray-500">{tasks.filter(t => t.status === status).length}</span>
                                    </h3>
                                </div>
                                <div className="p-4 space-y-4 overflow-y-auto flex-1">
                                    {tasks.filter(t => t.status === status).map(task => (
                                        <TaskCard 
                                            key={task.id} 
                                            task={task} 
                                            onEdit={handleOpenEditModal} 
                                            onDelete={handleDelete} 
                                            // Pass mouse and keyboard handlers
                                            onDragStart={(e) => handleDragStart(e, task)}
                                            onKeyDown={(e) => handleKeyDown(e, task)}
                                            // Pass state for visual indicators
                                            isDragging={draggedItem?.id === task.id}
                                            isKeyboardSelected={keyboardSelectedItem?.id === task.id}
                                        />
                                    ))}
                                </div>
                             </div>
                        ))}
                    </div>
                </main>
                {isModalOpen && (
                    <TaskEditorModal
                        isOpen={isModalOpen}
                        onClose={() => setModalOpen(false)}
                        onSave={handleSaveTask}
                        taskToEdit={taskToEdit}
                        campaigns={campaigns}
                    />
                )}
                 <ConfirmationModal
                     isOpen={isConfirmOpen}
                    onClose={() => setConfirmOpen(false)}
                    onConfirm={confirmDelete}
                    message="Are you sure you want to delete this task?"
                />
            </div>
        </div>
    );
}

│   │   ├── TaskEditorModal.js

--------------------------------------------------------------------------------
Path: C:\Users\shop\global-batteries-dashboard\app\tasks\TaskEditorModal.js
--------------------------------------------------------------------------------
// app/tasks/TaskEditorModal.js
"use client";
import React, { useState, useEffect, useRef } from 'react';
import toast from 'react-hot-toast';
import { z } from 'zod';

const KANBAN_COLUMNS = ["To Do", "In Progress", "Done"];
const taskSchema = z.object({
  id: z.string().optional(),
  text: z.string().min(1, { message: "Task description is required." }),
  priority: z.enum(['High', 'Medium', 'Low']),
  campaignId: z.string().optional().nullable(),
  campaign: z.string().optional().nullable(),
  status: z.enum(KANBAN_COLUMNS),
});

export default function TaskEditorModal({ isOpen, onClose, onSave, taskToEdit, campaigns }) {
    const [text, setText] = useState('');
    const [campaignId, setCampaignId] = useState('');
    const [priority, setPriority] = useState('Medium');
    const modalRef = useRef(null);

    useEffect(() => {
        if (isOpen) {
            if (taskToEdit) {
                setText(taskToEdit.text || '');
                setCampaignId(taskToEdit.campaignId || '');
                setPriority(taskToEdit.priority || 'Medium');
            } else {
                setText('');
                setCampaignId('');
                setPriority('Medium');
            }
            if (modalRef.current) {
                modalRef.current.focus();
            }
        }
    }, [taskToEdit, isOpen, campaigns]);

    if (!isOpen) return null;

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!text.trim()) {
            toast.error("Task description cannot be empty.");
            return;
        }

        const linkedCampaign = campaigns.find(c => c.id === campaignId);
        const savedTask = {
            ...taskToEdit,
            id: taskToEdit?.id,
            text,
            priority,
            campaignId: campaignId || null,
            campaign: linkedCampaign ? linkedCampaign.name : 'Unassigned',
            status: taskToEdit?.status || 'To Do'
        };

        const result = taskSchema.safeParse(savedTask);
        if (!result.success) {
            toast.error(`Validation failed: ${result.error.errors.map(err => err.message).join(', ')}`);
            return;
        }
        onSave(result.data);
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div ref={modalRef} tabIndex="-1" className="bg-gray-900 border border-gray-800 w-full max-w-lg rounded-xl shadow-2xl m-4" onClick={(e) => e.stopPropagation()}>
                <form onSubmit={handleSubmit}>
                    <div className="flex items-center justify-between p-6 border-b border-gray-800">
                        <h3 className="text-xl font-semibold text-white">{taskToEdit ? 'Edit Task' : 'Create New Task'}</h3>
                        <button type="button" onClick={onClose} className="text-gray-400 hover:text-white text-3xl leading-none" aria-label="Close modal">&times;</button>
                    </div>
                    <div className="p-6 space-y-4">
                        <div>
                            <label htmlFor="taskText" className="block text-sm font-medium text-gray-300 mb-1">Task Description</label>
                            <input type="text" name="taskText" id="taskText" value={text} onChange={(e) => setText(e.target.value)} placeholder="e.g., Design new video creative" required className="w-full bg-gray-800 border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400" />
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label htmlFor="campaign" className="block text-sm font-medium text-gray-300 mb-1">Link to Campaign</label>
                                <select name="campaign" id="campaign" value={campaignId} onChange={(e) => setCampaignId(e.target.value)} className="w-full bg-gray-800 border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400" disabled={!campaigns.length}>
                                    <option value="">Unassigned</option>
                                    {campaigns.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}
                                </select>
                                {!campaigns.length && <p className="text-sm text-gray-500 mt-1">No campaigns available to link.</p>}
                            </div>
                            <div>
                                <label htmlFor="priority" className="block text-sm font-medium text-gray-300 mb-1">Priority</label>
                                <select name="priority" id="priority" value={priority} onChange={(e) => setPriority(e.target.value)} className="w-full bg-gray-800 border-gray-700 rounded-lg py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-400">
                                    <option>High</option><option>Medium</option><option>Low</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div className="flex items-center justify-end p-6 border-t border-gray-800 space-x-2">
                        <button type="button" onClick={onClose} className="px-4 py-2 text-sm font-medium bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors">Cancel</button>
                        <button type="submit" className="px-4 py-2 text-sm font-semibold text-gray-950 bg-yellow-400 rounded-lg hover:bg-yellow-300 transition-colors">Save Task</button>
                    </div>
                </form>
            </div>
        </div>
    );
}

